<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Atomic on 泥土巢</title>
    <link>http://nituchao.com/tags/atomic/index.xml</link>
    <description>Recent content in Atomic on 泥土巢</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2017, nituchao | All rights reserved.</copyright>
    <atom:link href="http://nituchao.com/tags/atomic/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Atomic变量</title>
      <link>http://nituchao.com/post/juc.atomic/atomic-summary/</link>
      <pubDate>Thu, 23 Feb 2017 18:39:27 +0800</pubDate>
      
      <guid>http://nituchao.com/post/juc.atomic/atomic-summary/</guid>
      <description>&lt;p&gt;Java原子变量的诞生源自一个简单的需求 —— 多个线程共享某个变量或者对象时，需要对修改和读取操作进行同步。&lt;/p&gt;

&lt;p&gt;同步包含两层含义：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;互斥访问&lt;/li&gt;
&lt;li&gt;可见性&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;通常，多线程对临界资源的互斥访问通过对象锁(synchronized关键字)保证。对象锁是一种独占锁（悲观锁），会导致其它所有需要锁的线程挂起。而可见性则由volatile的内存语义保证。&lt;/p&gt;

&lt;p&gt;Java 1.5开始提供了原子变量和原子引用，这些类放置在&lt;code&gt;java.util.concurrent&lt;/code&gt;下。大概可以归为4类：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;基本类型：AtomicInteger, AtomicLong, AtomicBoolean;&lt;/li&gt;
&lt;li&gt;数组类型：AtomicIntegerArray, AtomicLongArray, AtomicReferenceArray;&lt;/li&gt;
&lt;li&gt;引用类型：AtomicReference, AtomicStampedReference, AtomicMarkableReference;&lt;/li&gt;
&lt;li&gt;对象的属性修改类型：AtomicIntegerFieldUpdater, AtomicLongFieldUpdater, AtomicReferenceFieldUpdater;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Java原子变量的存在是为了对相应的数据进行原子操作。&lt;/p&gt;

&lt;p&gt;所谓的原子操作包含下面几层含义：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;操作过程不会被中断。&lt;/li&gt;
&lt;li&gt;操作过程不会被阻塞。&lt;/li&gt;
&lt;li&gt;修改结果被其他线程可见。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>AtomicReference源码分析</title>
      <link>http://nituchao.com/post/juc.atomic/atomic-reference/</link>
      <pubDate>Thu, 23 Feb 2017 18:30:27 +0800</pubDate>
      
      <guid>http://nituchao.com/post/juc.atomic/atomic-reference/</guid>
      <description>

&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;

&lt;p&gt;在原子变量相关类中，AtomicReference, AtomicStampedReference, AtomicMarkableReference三个类是对于引用类型的操作，其原理和用法类似。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;AtomicStampedReference&lt;/code&gt;是带了整型版本号(int stamp)的引用型原子变量，每次执行CAS操作时需要对比版本，如果版本满足要求，则操作成功，否则操作失败，用于防止CAS操作的ABA问题。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;AtomicMarkableReference&lt;/code&gt;则是带了布尔型标记位(Boolean mark)的引用型原子量，每次执行CAS操作是需要对比该标记位，如果标记满足要求，则操作成功，否则操作失败。&lt;/p&gt;

&lt;p&gt;Java原子变量的实现依赖于&lt;code&gt;sun.misc.Unsafe&lt;/code&gt;的CAS操作和volatile的内存可见性语义。&lt;/p&gt;

&lt;p&gt;本文基于JDK1.7.0_67&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;java version &amp;ldquo;1.7.0&lt;em&gt;67&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;_Java&amp;trade; SE Runtime Environment (build 1.7.0_67-b01)&lt;/p&gt;

&lt;p&gt;Java HotSpot&amp;trade; 64-Bit Server VM (build 24.65-b04, mixed mode)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;成员变量&#34;&gt;成员变量&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;AtomicReference&lt;/code&gt;通过泛型&lt;code&gt;T&lt;/code&gt;来声明成员值的类型，表示这是对引用类型的操作。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 成员变量unsafe是原子变量相关操作的基础
// 原子变量的修改操作最终有sun.misc.Unsafe类的CAS操作实现
private static final Unsafe unsafe = Unsafe.getUnsafe();
// 成员变量value的内存偏移值，在静态代码块中初始化
private static final long valueOffset;
// 通过volatile关键字保证可见性，用于保存值
private volatile V value;

static {
  try {
    valueOffset = unsafe.objectFieldOffset
      (AtomicReference.class.getDeclaredField(&amp;quot;value&amp;quot;));
  } catch (Exception ex) { throw new Error(ex); }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;函数列表&#34;&gt;函数列表&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 构造函数，初始化值为null
public AtomicReference()
// 构造函数，指定初始化值
public AtomicReference(V initialValue)
// 以原子方式获取当前值
public final V get()
// 以原子方式设置当前值为新的值newValue
public final void set(V newValue)
// 以原子方式设置当前值为新的值newValue
// 优先保证修改操作，而不保证volatile的可见性语义
// 效率较高
public final void lazySet(V newValue)
// 以原子方式设置当前值为update
// 如果当前值等于except，则设置成功，返回true
// 如果当前值不等于except，则设置失败，返回fase
// 该过程不阻塞
public final boolean compareAndSet(V expect, V update)
// 以原子方式设置当前值为update
// 如果当前值等于except，则设置成功，返回true
// 如果当前值不等于except，则设置失败，返回fase
// 该过程不阻塞
// 该过程不保证volatile成员的happens-before语义顺序
public final boolean weakCompareAndSet(V expect, V update)
// 以原子方式设置当前值为update
// 返回更新前的值
public final V getAndSet(V newValue)
// 返回当前值的string表达式
public String toString()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;重点函数分析&#34;&gt;重点函数分析&lt;/h2&gt;

&lt;h3 id=&#34;set-v-newvalue&#34;&gt;set(V newValue)&lt;/h3&gt;

&lt;p&gt;以原子方式设置当前值为newValue，因为set方法只是一个单操作的赋值语句，因此是原子的。加上volatile的内存可见性保证，Set是原子操作无疑。&lt;/p&gt;

&lt;h3 id=&#34;lazyset-v-newvalue&#34;&gt;lazySet(V newValue)&lt;/h3&gt;

&lt;p&gt;简单点说，lazySet优先保证数据的修改操作，而降低对可见性的要求。&lt;/p&gt;

&lt;p&gt;lazySet是使用Unsafe.putOrderedObject方法，这个方法在对低延迟代码是很有用的，它能够实现非堵塞的写入，这些写入不会被Java的JIT重新排序指令(&lt;a href=&#34;http://stackoverflow.com/questions/14321212/java-instruction-reordering-cache-in-threads&#34;&gt;instruction reordering&lt;/a&gt;)，这样它使用快速的存储-存储(store-store) barrier, 而不是较慢的存储-加载(store-load) barrier, 后者总是用在volatile的写操作上，这种性能提升是有代价的，虽然便宜，也就是写后结果并不会被其他线程看到，甚至是自己的线程，通常是几纳秒后被其他线程看到，这个时间比较短，所以代价可以忍受。&lt;/p&gt;

&lt;p&gt;类似Unsafe.putOrderedObject还有unsafe.putOrderedLong等方法，unsafe.putOrderedLong比使用 volatile long要快3倍左右。&lt;/p&gt;

&lt;h2 id=&#34;compareandset-v-expect-v-update&#34;&gt;compareAndSet(V expect,V update)&lt;/h2&gt;

&lt;p&gt;以原子方式设置当前值为update。如果当前值等于expect，并设置成功，返回true。如果当前值不等于expect，则设置失败，返回false。该过程不阻塞。由于是使用了&lt;code&gt;sun.misc.Unsafe&lt;/code&gt;的CAS操作实现，它是原子操作无疑。&lt;/p&gt;

&lt;p&gt;_&lt;em&gt;set和compareAndSet都是原子操作，只是他们的目的不同，set只是单纯想设置一个新的值。而compareAndSet则是希望在满足一定条件的情况下(当前值等于except)再设置新的值。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;weakcompareandset-v-expect-v-update&#34;&gt;weakCompareAndSet(V expect,V update)&lt;/h2&gt;

&lt;p&gt;以原子方式设置当前值为update。它的实现与compareAndSet完全一致。JDK文档中说，weakCompareAndSet在更新变量时并不创建任何&lt;code&gt;happens-before&lt;/code&gt;顺序，因此即使要修改的值是volatile的，也不保证对该变量的读写操作的顺序（一般来讲，volatile的内存语义保证&lt;code&gt;happens-before&lt;/code&gt;顺序）。&lt;/p&gt;

&lt;p&gt;参考:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.xamarin.com/api/type/Java.Util.Concurrent.Atomic.AtomicMarkableReference/&#34;&gt;Java.Util.Concurrent.Atomic.AtomicMarkableReference Class&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>AtomicStampedReference源码分析</title>
      <link>http://nituchao.com/post/juc.atomic/atomic-stamped-reference/</link>
      <pubDate>Thu, 23 Feb 2017 18:30:27 +0800</pubDate>
      
      <guid>http://nituchao.com/post/juc.atomic/atomic-stamped-reference/</guid>
      <description>

&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;

&lt;p&gt;在原子变量相关类中，AtomicReference, AtomicStampedReference, AtomicMarkableReference三个类是对于引用类型的操作，其原理和用法类似。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;AtomicStampedReference&lt;/code&gt;是带了整型版本号(int stamp)的引用型原子变量，每次执行CAS操作时需要对比版本，如果版本满足要求，则操作成功，否则操作失败，用于防止CAS操作的ABA问题。本文重点分析&lt;code&gt;AtomicStampedReference&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;AtomicMarkableReference&lt;/code&gt;则是带了布尔型标记位(Boolean mark)的引用型原子量，每次执行CAS操作是需要对比该标记位，如果标记满足要求，则操作成功，否则操作失败。&lt;/p&gt;

&lt;p&gt;Java原子变量的实现依赖于&lt;code&gt;sun.misc.Unsafe&lt;/code&gt;的CAS操作和volatile的内存可见性语义。&lt;/p&gt;

&lt;p&gt;本文基于JDK1.7.0_67&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;java version &amp;ldquo;1.7.0&lt;em&gt;67&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;_Java&amp;trade; SE Runtime Environment (build 1.7.0_67-b01)&lt;/p&gt;

&lt;p&gt;Java HotSpot&amp;trade; 64-Bit Server VM (build 24.65-b04, mixed mode)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;内部类&#34;&gt;内部类&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;AtomicStampedReference&lt;/code&gt;是带整形版本号的原子引用类型，为了同时兼顾引用值和版本号，它定义了一个静态内部类&lt;code&gt;Pair&lt;/code&gt;，&lt;code&gt;AtomicStampedReference&lt;/code&gt;的相关操作都是对&lt;code&gt;Pair&lt;/code&gt;内成员的操作。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private static class Pair&amp;lt;T&amp;gt; {
    final T reference;
    final int stamp;
    private Pair(T reference, int stamp) {
        this.reference = reference;
        this.stamp = stamp;
    }
    static &amp;lt;T&amp;gt; Pair&amp;lt;T&amp;gt; of(T reference, int stamp) {
      	return new Pair&amp;lt;T&amp;gt;(reference, stamp);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;成员变量&#34;&gt;成员变量&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;AtomicStampedReference&lt;/code&gt;除了常规的&lt;code&gt;sun.misc.Unsafe&lt;/code&gt;实例和&lt;code&gt;pairOffset&lt;/code&gt;内存偏移量外，声明了一个&lt;code&gt;volatile&lt;/code&gt;的&lt;code&gt;Pair&amp;lt;T&amp;gt;&lt;/code&gt;成员，用于同时维护引用值和版本号。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 成员变量unsafe是原子变量相关操作的基础
// 原子变量的修改操作最终有sun.misc.Unsafe类的CAS操作实现
private static final sun.misc.Unsafe UNSAFE = Unsafe.getUnsafe();
// 成员变量value的内存偏移值
private static final long pairOffset = objectFieldOffset(UNSAFE, &amp;quot;pair&amp;quot;, AtomicStampedReference.class);
// 用volatile的内存语义保证可见性
// 保存引用值和版本号
private volatile Pair&amp;lt;V&amp;gt; pair;

// 获取指定域的内存偏移量
static long objectFieldOffset(sun.misc.Unsafe UNSAFE,
                              String field, Class&amp;lt;?&amp;gt; klazz) {
    try {
        return UNSAFE.objectFieldOffset(klazz.getDeclaredField(field));
    } catch (NoSuchFieldException e) {
        // Convert Exception to corresponding Error
        NoSuchFieldError error = new NoSuchFieldError(field);
        error.initCause(e);
        throw error;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;函数列表&#34;&gt;函数列表&lt;/h2&gt;

&lt;p&gt;由于&lt;code&gt;AtomicStampedReference&lt;/code&gt;要同时维护引用值和版本号，因此很多操作变得复杂。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 构造函数，初始化引用和版本号
public AtomicStampedReference(V initialRef, int initialStamp)
// 以原子方式获取当前引用值
public V getReference()
// 以原子方式获取当前版本号
public int getStamp()
// 以原子方式获取当前引用值和版本号
public V get(int[] stampHolder)
// 以原子的方式同时更新引用值和版本号
// 当期望引用值不等于当前引用值时，操作失败，返回false
// 当期望版本号不等于当前版本号时，操作失败，返回false
// 在期望引用值和期望版本号同时等于当前值的前提下
// 当新的引用值和新的版本号同时等于当前值时，不更新，直接返回true
// 当新的引用值和新的版本号不同时等于当前值时，同时设置新的引用值和新的版本号，返回true
// 该过程不保证volatile成员的happens-before语义顺序
public boolean weakCompareAndSet(V  expectedReference,
                                 V  newReference,
                                 int expectedStamp,
                                 int newStamp)
// 以原子的方式同时更新引用值和版本号
// 当期望引用值不等于当前引用值时，操作失败，返回false
// 当期望版本号不等于当前版本号时，操作失败，返回false
// 在期望引用值和期望版本号同时等于当前值的前提下
// 当新的引用值和新的版本号同时等于当前值时，不更新，直接返回true
// 当新的引用值和新的版本号不同时等于当前值时，同时设置新的引用值和新的版本号，返回true
public boolean compareAndSet(V   expectedReference,
                             V   newReference,
                             int expectedStamp,
                             int newStamp)
// 以原子方式设置引用的当前值为新值newReference
// 同时，以原子方式设置版本号的当前值为新值newStamp
// 新引用值和新版本号只要有一个跟当前值不一样，就进行更新
public void set(V newReference, int newStamp)
// 以原子方式设置版本号为新的值
// 前提：引用值保持不变
// 当期望的引用值与当前引用值不相同时，操作失败，返回fasle
// 当期望的引用值与当前引用值相同时，操作成功，返回true
public boolean attemptStamp(V expectedReference, int newStamp)
// 使用`sun.misc.Unsafe`类原子地交换两个对象
private boolean casPair(Pair&amp;lt;V&amp;gt; cmp, Pair&amp;lt;V&amp;gt; val)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;重点函数分析&#34;&gt;重点函数分析&lt;/h2&gt;

&lt;h3 id=&#34;atomicstampedreference&#34;&gt;AtomicStampedReference&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public AtomicStampedReference(V initialRef, int initialStamp) {
  	pair = Pair.of(initialRef, initialStamp);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;构造函数，根据指定的引用值和版本号，构造一个Pair对象，并将该对象赋值给成员变量&lt;code&gt;pair&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;由于成员变量&lt;code&gt;pair&lt;/code&gt;被volatile修饰，并且这里只有一个单操作的赋值语句，因此是可以保证原子性的。&lt;/p&gt;

&lt;h3 id=&#34;get&#34;&gt;get&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public V get(int[] stampHolder) {
    Pair&amp;lt;V&amp;gt; pair = this.pair;
    stampHolder[0] = pair.stamp;
    return pair.reference;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;真个函数很有意思，同时获取引用值和版本号。由于Java程序只能有一个返回值，该函数通过一个数组参数&lt;code&gt;int[] stampHolder&lt;/code&gt;来返回版本号，而通过&lt;code&gt;return&lt;/code&gt;语句返回引用值。&lt;/p&gt;

&lt;h3 id=&#34;set&#34;&gt;set&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void set(V newReference, int newStamp) {
	Pair&amp;lt;V&amp;gt; current = pair;
	if (newReference != current.reference || newStamp != current.stamp)
		this.pair = Pair.of(newReference, newStamp);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;只要新的引用值和新的版本号，有一个与当前值不一样的，就同时修改引用值和版本号。&lt;/p&gt;

&lt;h3 id=&#34;compareandset&#34;&gt;compareAndSet&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public boolean compareAndSet(V   expectedReference,
                             V   newReference,
                             int expectedStamp,
                             int newStamp) {
 	Pair&amp;lt;V&amp;gt; current = pair;
 	return
 		expectedReference == current.reference &amp;amp;&amp;amp;
 		expectedStamp == current.stamp &amp;amp;&amp;amp;
 		((newReference == current.reference &amp;amp;&amp;amp;
 		  newStamp == current.stamp) ||
 		  casPair(current, Pair.of(newReference, newStamp)));
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以原子的方式同时更新引用值和版本号。&lt;/p&gt;

&lt;p&gt;当期望引用值不等于当前引用值时，操作失败，返回false。&lt;/p&gt;

&lt;p&gt;当期望版本号不等于当前版本号时，操作失败，返回false。&lt;/p&gt;

&lt;p&gt;在期望引用值和期望版本号同时等于当前值的前提下，当新的引用值和新的版本号同时等于当前值时，不更新，直接返回true。由于要修改的内容与原内容完全一致，这种处理可以避免一次内存操作，效率较高。&lt;/p&gt;

&lt;p&gt;当新的引用值和新的版本号不同时等于当前值时，同时设置新的引用值和新的版本号，返回true&lt;/p&gt;

&lt;h3 id=&#34;weakcompareandset&#34;&gt;weakCompareAndSet&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public boolean weakCompareAndSet(V   expectedReference,
                                 V   newReference,
                                 int expectedStamp,
                                 int newStamp) {
  	return compareAndSet(expectedReference, newReference,
                       	 expectedStamp, newStamp);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以原子的方式同时更新引用值和版本号。该是通过调用CompareAndSet实现的。JDK文档中说，weakCompareAndSet在更新变量时并不创建任何&lt;code&gt;happens-before&lt;/code&gt;顺序，因此即使要修改的值是volatile的，也不保证对该变量的读写操作的顺序（一般来讲，volatile的内存语义保证&lt;code&gt;happens-before&lt;/code&gt;顺序）。&lt;/p&gt;

&lt;h3 id=&#34;attemptstamp&#34;&gt;attemptStamp&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public boolean attemptStamp(V expectedReference, int newStamp) {
  	Pair&amp;lt;V&amp;gt; current = pair;
  	return
    	expectedReference == current.reference &amp;amp;&amp;amp;
    	(newStamp == current.stamp ||
     	 casPair(current, Pair.of(expectedReference, newStamp)));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改指定引用值的版本号。&lt;/p&gt;

&lt;p&gt;当期望的引用值与当前引用值不相同时，操作失败，返回fasle。
当期望的引用值与当前引用值相同时，操作成功，返回true。&lt;/p&gt;

&lt;h3 id=&#34;caspair&#34;&gt;casPair&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private boolean casPair(Pair&amp;lt;V&amp;gt; cmp, Pair&amp;lt;V&amp;gt; val) {
  	return UNSAFE.compareAndSwapObject(this, pairOffset, cmp, val);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用&lt;code&gt;sun.misc.Unsafe&lt;/code&gt;类原子地交换两个对象。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AtomicMarkableReference源码分析</title>
      <link>http://nituchao.com/post/juc.atomic/atomic-markable-reference/</link>
      <pubDate>Thu, 23 Feb 2017 18:30:25 +0800</pubDate>
      
      <guid>http://nituchao.com/post/juc.atomic/atomic-markable-reference/</guid>
      <description>

&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;

&lt;p&gt;在原子变量相关类中，AtomicReference, AtomicStampedReference, AtomicMarkableReference三个类是对于引用类型的操作，其原理和用法类似。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;AtomicStampedReference&lt;/code&gt;是带了整型标记值(int stamp)的引用型原子变量，每次执行CAS操作时需要对比版本，如果版本满足要求，则操作成功，否则操作失败，用于防止CAS操作的ABA问题。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;AtomicMarkableReference&lt;/code&gt;则是带了布尔型标记位(Boolean mark)的引用型原子量，每次执行CAS操作是需要对比该标记位，如果标记满足要求，则操作成功，否则操作失败。本文重点分析&lt;code&gt;AtomicMarkableReference&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;Java原子变量的实现依赖于&lt;code&gt;sun.misc.Unsafe&lt;/code&gt;的CAS操作和volatile的内存可见性语义。&lt;/p&gt;

&lt;p&gt;本文基于JDK1.7.0_67&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;java version &amp;ldquo;1.7.0_&lt;em&gt;67&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;_Java&amp;trade; SE Runtime Environment (build 1.7.0_67-b01)&lt;/p&gt;

&lt;p&gt;Java HotSpot&amp;trade; 64-Bit Server VM (build 24.65-b04, mixed mode)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;内部类&#34;&gt;内部类&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;AtomicMarkableReference&lt;/code&gt;是带布尔型标记为的原子引用类型，为了同时兼顾引用值和标记位，它定义了一个静态内部类&lt;code&gt;Pair&lt;/code&gt;，&lt;code&gt;AtomicMarkableReference&lt;/code&gt;的相关操作都是对&lt;code&gt;Pair&lt;/code&gt;内成员的操作。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private static class Pair&amp;lt;T&amp;gt; {
    final T reference;
    final boolean mark;
    private Pair(T reference, boolean mark) {
        this.reference = reference;
        this.mark = mark;
    }
    static &amp;lt;T&amp;gt; Pair&amp;lt;T&amp;gt; of(T reference, int mark) {
      	return new Pair&amp;lt;T&amp;gt;(reference, mark);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;成员变量&#34;&gt;成员变量&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;AtomicMarkableReference&lt;/code&gt;除了常规的&lt;code&gt;sun.misc.Unsafe&lt;/code&gt;实例和&lt;code&gt;pairOffset&lt;/code&gt;内存偏移量外，声明了一个&lt;code&gt;volatile&lt;/code&gt;的&lt;code&gt;Pair&amp;lt;T&amp;gt;&lt;/code&gt;成员，用于同时维护引用值和标记值。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 成员变量unsafe是原子变量相关操作的基础
// 原子变量的修改操作最终有sun.misc.Unsafe类的CAS操作实现
private static final sun.misc.Unsafe UNSAFE = Unsafe.getUnsafe();
// 成员变量value的内存偏移值
private static final long pairOffset = objectFieldOffset(UNSAFE, &amp;quot;pair&amp;quot;, AtomicMarkableReference.class);
// 用volatile的内存语义保证可见性
// 保存引用值和标记值
private volatile Pair&amp;lt;V&amp;gt; pair;

// 获取指定域的内存偏移量
static long objectFieldOffset(sun.misc.Unsafe UNSAFE,
                              String field, Class&amp;lt;?&amp;gt; klazz) {
    try {
        return UNSAFE.objectFieldOffset(klazz.getDeclaredField(field));
    } catch (NoSuchFieldException e) {
        // Convert Exception to corresponding Error
        NoSuchFieldError error = new NoSuchFieldError(field);
        error.initCause(e);
        throw error;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;函数列表&#34;&gt;函数列表&lt;/h2&gt;

&lt;p&gt;由于&lt;code&gt;AtomicMarkableReference&lt;/code&gt;要同时维护引用值和标记值，因此很多操作变得复杂。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 构造函数，初始化引用和标记值
public AtomicMarkableReference(V initialRef, boolean initialMark)
// 以原子方式获取当前引用值
public V getReference()
// 以原子方式获取当前标记值
public int isMarked()
// 以原子方式获取当前引用值和标记值
public V get(boolean[] markHolder)
// 以原子的方式同时更新引用值和标记值
// 当期望引用值不等于当前引用值时，操作失败，返回false
// 当期望标记值不等于当前标记值时，操作失败，返回false
// 在期望引用值和期望标记值同时等于当前值的前提下
// 当新的引用值和新的标记值同时等于当前值时，不更新，直接返回true
// 当新的引用值和新的标记值不同时等于当前值时，同时设置新的引用值和新的标记值，返回true
// 该过程不保证volatile成员的happens-before语义顺序
public boolean weakCompareAndSet(V  expectedReference,
                                 V  newReference,
                                 int expectedMark,
                                 int newMark)
// 以原子的方式同时更新引用值和标记值
// 当期望引用值不等于当前引用值时，操作失败，返回false
// 当期望标记值不等于当前标记值时，操作失败，返回false
// 在期望引用值和期望标记值同时等于当前值的前提下
// 当新的引用值和新的标记值同时等于当前值时，不更新，直接返回true
// 当新的引用值和新的标记值不同时等于当前值时，同时设置新的引用值和新的标记值，返回true
public boolean compareAndSet(V   expectedReference,
                             V   newReference,
                             int expectedMark,
                             int newMark)
// 以原子方式设置引用的当前值为新值newReference
// 同时，以原子方式设置标记值的当前值为新值newMark
// 新引用值和新标记值只要有一个跟当前值不一样，就进行更新
public void set(V newReference, int newMark)
// 以原子方式设置标记值为新的值
// 前提：引用值保持不变
// 当期望的引用值与当前引用值不相同时，操作失败，返回fasle
// 当期望的引用值与当前引用值相同时，操作成功，返回true
public boolean attemptMark(V expectedReference, int newMark)
// 使用`sun.misc.Unsafe`类原子地交换两个对象
private boolean casPair(Pair&amp;lt;V&amp;gt; cmp, Pair&amp;lt;V&amp;gt; val)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;重点函数分析&#34;&gt;重点函数分析&lt;/h2&gt;

&lt;h3 id=&#34;atomicmarkablereference&#34;&gt;AtomicMarkableReference&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public AtomicMarkableReference(V initialRef, int initialMark) {
  	pair = Pair.of(initialRef, initialMark);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;构造函数，根据指定的引用值和标记值，构造一个Pair对象，并将该对象赋值给成员变量&lt;code&gt;pair&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;由于成员变量&lt;code&gt;pair&lt;/code&gt;被volatile修饰，并且这里只有一个单操作的赋值语句，因此是可以保证原子性的。&lt;/p&gt;

&lt;h3 id=&#34;get&#34;&gt;get&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public V get(int[] markHolder) {
    Pair&amp;lt;V&amp;gt; pair = this.pair;
    markHolder[0] = pair.markz;
    return pair.reference;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;真个函数很有意思，同时获取引用值和标记值。由于Java程序只能有一个返回值，该函数通过一个数组参数&lt;code&gt;int[] markHolder&lt;/code&gt;来返回标记值，而通过&lt;code&gt;return&lt;/code&gt;语句返回引用值。&lt;/p&gt;

&lt;h3 id=&#34;set&#34;&gt;set&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void set(V newReference, int newMark) {
	Pair&amp;lt;V&amp;gt; current = pair;
	if (newReference != current.reference || newMark != current.mark)
		this.pair = Pair.of(newReference, newMark);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;只要新的引用值和新的标记值，有一个与当前值不一样的，就同时修改引用值和标记值。&lt;/p&gt;

&lt;h3 id=&#34;compareandset&#34;&gt;compareAndSet&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public boolean compareAndSet(V   expectedReference,
                             V   newReference,
                             int expectedMark,
                             int newMark) {
 	Pair&amp;lt;V&amp;gt; current = pair;
 	return
 		expectedReference == current.reference &amp;amp;&amp;amp;
 		expectedMark == current.mark &amp;amp;&amp;amp;
 		((newReference == current.reference &amp;amp;&amp;amp;
 		  newMark == current.mark) ||
 		  casPair(current, Pair.of(newReference, newMark)));
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以原子的方式同时更新引用值和标记值。&lt;/p&gt;

&lt;p&gt;当期望引用值不等于当前引用值时，操作失败，返回false。&lt;/p&gt;

&lt;p&gt;当期望标记值不等于当前标记值时，操作失败，返回false。&lt;/p&gt;

&lt;p&gt;在期望引用值和期望标记值同时等于当前值的前提下，当新的引用值和新的标记值同时等于当前值时，不更新，直接返回true。由于要修改的内容与原内容完全一致，这种处理可以避免一次内存操作，效率较高。&lt;/p&gt;

&lt;p&gt;当新的引用值和新的标记值不同时等于当前值时，同时设置新的引用值和新的标记值，返回true&lt;/p&gt;

&lt;h3 id=&#34;weakcompareandset&#34;&gt;weakCompareAndSet&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public boolean weakCompareAndSet(V   expectedReference,
                                 V   newReference,
                                 int expectedMark,
                                 int newMark) {
  	return compareAndSet(expectedReference, newReference,
                       	 expectedMark, newMark);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以原子的方式同时更新引用值和标记值。该是通过调用CompareAndSet实现的。JDK文档中说，weakCompareAndSet在更新变量时并不创建任何&lt;code&gt;happens-before&lt;/code&gt;顺序，因此即使要修改的值是volatile的，也不保证对该变量的读写操作的顺序（一般来讲，volatile的内存语义保证&lt;code&gt;happens-before&lt;/code&gt;顺序）。&lt;/p&gt;

&lt;h3 id=&#34;attemptmark&#34;&gt;attemptMark&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public boolean attemptMark(V expectedReference, int newMark) {
  	Pair&amp;lt;V&amp;gt; current = pair;
  	return
    	expectedReference == current.reference &amp;amp;&amp;amp;
    	(newMark == current.mark ||
     	 casPair(current, Pair.of(expectedReference, newMark)));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改指定引用值的标记值。&lt;/p&gt;

&lt;p&gt;当期望的引用值与当前引用值不相同时，操作失败，返回fasle。
当期望的引用值与当前引用值相同时，操作成功，返回true。&lt;/p&gt;

&lt;h3 id=&#34;caspair&#34;&gt;casPair&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private boolean casPair(Pair&amp;lt;V&amp;gt; cmp, Pair&amp;lt;V&amp;gt; val) {
  	return UNSAFE.compareAndSwapObject(this, pairOffset, cmp, val);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用&lt;code&gt;sun.misc.Unsafe&lt;/code&gt;类原子地交换两个对象。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AtomicReferenceFieldUpdater源码分析</title>
      <link>http://nituchao.com/post/juc.atomic/atomic-reference-field-update/</link>
      <pubDate>Thu, 23 Feb 2017 18:28:27 +0800</pubDate>
      
      <guid>http://nituchao.com/post/juc.atomic/atomic-reference-field-update/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>