<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cxf on 泥土巢</title>
    <link>http://nituchao.com/tags/cxf/index.xml</link>
    <description>Recent content in Cxf on 泥土巢</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2017, nituchao | All rights reserved.</copyright>
    <atom:link href="http://nituchao.com/tags/cxf/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Apache CXF解析Map/HashMap</title>
      <link>http://nituchao.com/post/2013/apache-cxf-parse-hash-map/</link>
      <pubDate>Wed, 11 Dec 2013 14:06:00 +0800</pubDate>
      
      <guid>http://nituchao.com/post/2013/apache-cxf-parse-hash-map/</guid>
      <description>

&lt;p&gt;项目中WebService框架用的是Apache CXF，但是在使用中发现Apache CXF不支持解析Map和HashMap，而且SOAP报文(XML)和JavaBean的转化是通过JAXB实现的，没办法，自己写了个Map到XML的适配器，来实现两者的转化。&lt;/p&gt;

&lt;h2 id=&#34;map适配器&#34;&gt;Map适配器&lt;/h2&gt;

&lt;p&gt;MapAdapter用来完成Java的Map类型与XML中对应节点的转换。&lt;/p&gt;

&lt;p&gt;以MapAdatper为中心，一边是XML类型的SOAP报文，一边是以HashMap为元素的list列表。通过以下两个方法完成双向转换:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;unmarshal: 完成XML到JAVA的转换。&lt;/li&gt;
&lt;li&gt;marshal: 完成JAVA到XML的转换。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;该适配器会通过注解在具体的实体类上指定。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import java.util.HashMap;
import java.util.Map;


import javax.xml.bind.annotation.adapters.XmlAdapter;


/**
 * Map适配器，完成Java中map与XML中对应节点的转换
 * 
 * &amp;lt;p&amp;gt;
 * detailed comment
 * @author zWX184091 2013-8-15
 * @see
 * @since 1.0
 */
public class MapAdapter extends XmlAdapter&amp;lt;MapConvertor, HashMap&amp;lt;String, String&amp;gt;&amp;gt;
{


    /**
     * XML to JAVA
     * 
     * @param map
     * @return HashMap&amp;lt;String, String&amp;gt;
     * @throws Exception
     */
    @Override
    public HashMap&amp;lt;String, String&amp;gt; unmarshal(MapConvertor map) throws Exception
    {
        // TODO Auto-generated method stub
        HashMap&amp;lt;String, String&amp;gt; result = new HashMap&amp;lt;String, String&amp;gt;();

        // 遍历MapConvertor，将XML节点内容写入JavaBean Map对象
        for (MapConvertor.MapEntry e : map.getEntry())
        {
            result.put(e.getKey(), e.getValue());
        }
        return result;
    }


    /**
     * JAVA to XML
     * 
     * @param map
     * @return MapConvertor
     * @throws Exception
     */
    @Override
    public MapConvertor marshal(HashMap&amp;lt;String, String&amp;gt; map) throws Exception
    {


        // 创建MapConvertor对象，盛放XML节点内容
        MapConvertor convertor = new MapConvertor();


        // 遍历map，将JavaBean中数据写入XML节点
        for (Map.Entry&amp;lt;String, String&amp;gt; entry : map.entrySet())
        {
            // 创建空的MapEntry对象(该mapEntry应该放在循环内，防止重复使用同一个java对象引用)
            MapConvertor.MapEntry mapEntry = new MapConvertor.MapEntry();


            mapEntry.setKey(entry.getKey());
            mapEntry.setValue(entry.getValue());


            convertor.addEntry(mapEntry);
        }
        return convertor;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;map转换器&#34;&gt;Map转换器&lt;/h2&gt;

&lt;p&gt;Map转换器中聚合了一个元素为MapEntry的list集合对象，MapEntry中聚合了一个String类型的key成员和一个String类型的value成员，用来完成和Java中的HashMap的对接。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import java.util.ArrayList;
import java.util.List;
import java.util.Map.Entry;


import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;


/**
 * Map转换器
 * 
 * &amp;lt;p&amp;gt;
 * detailed comment
 * @author zWX184091 2013-7-31
 * @see
 * @since 1.0
 */
@XmlType(name = &amp;quot;MapConvertor&amp;quot;)
@XmlAccessorType(XmlAccessType.FIELD)
public class MapConvertor
{


    // SOAP报文结构是一个Map的List
    private List&amp;lt;MapEntry&amp;gt; entry = new ArrayList&amp;lt;MapEntry&amp;gt;();


    public void addEntry(MapEntry entry)
    {
        this.entry.add(entry);
    }


    public List&amp;lt;MapEntry&amp;gt; getEntry()
    {
        return entry;
    }


    public void setEntry(List&amp;lt;MapEntry&amp;gt; entry)
    {
        this.entry = entry;
    }


    public static class MapEntry
    {
        private String key;


        private String value;


        public MapEntry()
        {
            super();
        }


        public MapEntry(String key, String value)
        {
            super();
            this.key = key;
            this.value = value;
        }


        public MapEntry(Entry&amp;lt;String, String&amp;gt; entry)
        {
            super();
            this.key = entry.getKey();
            this.value = entry.getValue();
        }


        public String getKey()
        {
            return key;
        }


        public String getValue()
        {
            return value;
        }


        public void setKey(String key)
        {
            this.key = key;
        }


        public void setValue(String value)
        {
            this.value = value;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;实体类&#34;&gt;实体类&lt;/h2&gt;

&lt;p&gt;SigParam是一个Java的实体类，该类的成员变量是一个以HashMap为元素的List列表。在get方法上通过注解@XmlJavaTypeAdapter来指定解析类。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class SigParam
{
    // SOAP报文结构是一个Map的集合(List)
    private List&amp;lt;HashMap&amp;lt;String, String&amp;gt;&amp;gt; entry;


    public SigParam(List&amp;lt;HashMap&amp;lt;String, String&amp;gt;&amp;gt; entry)
    {
        super();
        this.entry = entry;
    }


    public SigParam()
    {
        super();
    }


    @XmlElement(name = &amp;quot;string2stringMap&amp;quot;)
    @XmlJavaTypeAdapter(MapAdapter.class)
    public List&amp;lt;HashMap&amp;lt;String, String&amp;gt;&amp;gt; getEntry()
    {
        return entry;
    }


    public void setEntry(List&amp;lt;HashMap&amp;lt;String, String&amp;gt;&amp;gt; entry)
    {
        this.entry = entry;
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;soap报文内容&#34;&gt;SOAP报文内容&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;soapenv:Envelope xmlns:soapenv=&amp;quot;http://schemas.xmlsoap.org/soap/envelope/&amp;quot; 
                  xmlns:ser=&amp;quot;http://service.ws.userinterface.sa.security.com/&amp;quot;&amp;gt;
   &amp;lt;soapenv:Header&amp;gt;
      &amp;lt;userId&amp;gt;WHITE_GROUP_ADD_001&amp;lt;/userId&amp;gt;
      &amp;lt;password&amp;gt;000&amp;lt;/password&amp;gt;
   &amp;lt;/soapenv:Header&amp;gt;
   &amp;lt;soapenv:Body&amp;gt;
      &amp;lt;ser:execute&amp;gt;
         &amp;lt;arg0&amp;gt;
            &amp;lt;records&amp;gt;
               &amp;lt;string2stringMap&amp;gt;
                  &amp;lt;entry&amp;gt;
                     &amp;lt;key&amp;gt;groupName&amp;lt;/key&amp;gt;
                     &amp;lt;value&amp;gt;Hello_ggood&amp;lt;/value&amp;gt;
                  &amp;lt;/entry&amp;gt;
                  &amp;lt;entry&amp;gt;
                     &amp;lt;key&amp;gt;adName&amp;lt;/key&amp;gt;
                     &amp;lt;value&amp;gt;最后一次测试&amp;lt;/value&amp;gt;
                  &amp;lt;/entry&amp;gt;
                  &amp;lt;entry&amp;gt;
                     &amp;lt;key&amp;gt;time&amp;lt;/key&amp;gt;
                     &amp;lt;value&amp;gt;0909&amp;lt;/value&amp;gt;
                  &amp;lt;/entry&amp;gt;
               &amp;lt;/string2stringMap&amp;gt;
            &amp;lt;/records&amp;gt;
            &amp;lt;taskCode&amp;gt;WHITE_GROUP_ADD_001&amp;lt;/taskCode&amp;gt;
         &amp;lt;/arg0&amp;gt;
      &amp;lt;/ser:execute&amp;gt;
   &amp;lt;/soapenv:Body&amp;gt;
&amp;lt;/soapenv:Envelope&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;原生的JAXB支持简单的XML结构到JAVA实体类的解析。通过上面的Map适配器MapAdapter可以完成XML类型中比较复杂的数据结构的解析，比如：HashMap。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>