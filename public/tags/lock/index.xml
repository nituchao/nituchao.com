<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lock on 泥土巢</title>
    <link>http://nituchao.com/tags/lock/index.xml</link>
    <description>Recent content in Lock on 泥土巢</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2017, nituchao | All rights reserved.</copyright>
    <atom:link href="http://nituchao.com/tags/lock/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SPIN锁、TICKET锁、MCS锁、CLH锁原理</title>
      <link>http://nituchao.com/post/juc.lock/clh-spin-ticket-mcs-lock/</link>
      <pubDate>Thu, 23 Feb 2017 18:29:27 +0800</pubDate>
      
      <guid>http://nituchao.com/post/juc.lock/clh-spin-ticket-mcs-lock/</guid>
      <description>

&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;

&lt;p&gt;锁作为数据同步工具，Java提供了两种实现：synchronized和AQS，这两种锁的实现根本不同，但是在加锁和解锁的过程中，也有很多共同点。它们或多或少的利用了下面几种常见的加锁/解锁方式。对于这几种加锁/解锁设计的研究，可以帮助我们更好的理解Java的锁框架。&lt;/p&gt;

&lt;h2 id=&#34;spin锁&#34;&gt;SPIN锁&lt;/h2&gt;

&lt;p&gt;Spin锁即自旋锁。自旋锁是采用让当前线程不停地在循环体内&lt;code&gt;检测并设置临界资源的状态&lt;/code&gt;，直到状态满足条件并设置为指定的新状态。&lt;code&gt;检测并设置临界资源&lt;/code&gt;操作必须是原子的，这样即使多个线程在给定时间自旋，也只有一个线程可获得该锁。&lt;/p&gt;

&lt;p&gt;自旋锁的优点之一是自旋的线程不会被阻塞，一直处于活跃状态，对于锁保护的临界区较小的情况下，自旋获取锁和释放锁的成本都比较低，时间比较短。&lt;/p&gt;

&lt;h3 id=&#34;java中的自旋锁&#34;&gt;Java中的自旋锁&lt;/h3&gt;

&lt;p&gt;在JAVA中，我们可以使用原子变量和Unsafe类的CAS操作来实现自旋锁：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class SpinLock {
  private AtomicReference&amp;lt;Thread&amp;gt; atomic = new AtomicReference&amp;lt;Thread&amp;gt;();
  
  public void lock() {
    Thread currentThread = Thread.currentThread();
    
    // 如果锁未被占用，则设置当前线程为锁的拥有者。
    while(!atomic.compareAndSet(null, currentThread)) {}
  }
  
  public void unlock() {
    Thread currentThread = Thread.currentThread();
    // 只有锁的拥有者能释放锁
    atomic.compareAndSet(currentThread, null);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;缺点&#34;&gt;缺点&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;CAS操作需要硬件的配合；&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;保证各个CPU的缓存（L1、L2、L3、跨CPU Socket、主存）的数据一致性，通讯开销很大，在多处理器系统上更严重；&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;没法保证公平性，不保证等待进程/线程按照FIFO顺序获得锁。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;h3 id=&#34;linux中的自旋锁&#34;&gt;Linux中的自旋锁&lt;/h3&gt;

&lt;p&gt;自旋锁在Linux内核中广泛使用。在Linux操作系统中，自旋锁是一个互斥设备，它只有两个值&lt;code&gt;锁定&lt;/code&gt;和&lt;code&gt;解锁&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;由于操作系统和CPU直接打交道，自旋锁又可分为在单核处理器上和多核处理器上。&lt;/p&gt;

&lt;h4 id=&#34;单核处理器&#34;&gt;单核处理器&lt;/h4&gt;

&lt;p&gt;用在单核处理器上，有可分为两种：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;系统不支持内核抢占&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;此时自旋锁什么也不做，确实也不需要做什么，因为单核处理器只有一个线程在执行，又不支持内核抢占，因此资源不可能会被其他的线程访问到。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;系统支持内核抢占&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这种情况下，自旋锁加锁仅仅是禁止了内核抢占，解锁则是启用了内核抢占。&lt;/p&gt;

&lt;p&gt;在上述两种情况下，在获取自旋锁后可能会发生中断，若中断处理程序去访问自旋锁所保护的资源，则会发生死锁。因此，linux内核又提供了spin_lock_irq()和spin_lock_irqsave()，这两个函数会在获取自旋锁的同时（同时禁止内核抢占），禁止本地外部可屏蔽中断，从而保证自旋锁的原子操作。&lt;/p&gt;

&lt;h4 id=&#34;多核处理器&#34;&gt;多核处理器&lt;/h4&gt;

&lt;p&gt;多核处理器意味着有多个线程可以同时在不同的处理器上并行执行。&lt;/p&gt;

&lt;p&gt;举个例子：&lt;/p&gt;

&lt;p&gt;四核处理器，若A处理器上的线程1获取了锁,B、C两个处理器恰好这个时候也要访问这个锁保护的资源，因此他俩CPU就一直自旋忙等待。D并不需要这个资源，因此它可以正常处理其他事情。&lt;/p&gt;

&lt;p&gt;自旋锁的几个特点：&lt;/p&gt;

&lt;p&gt;1.被自旋锁保护的临界区代码执行时不能睡眠。单核处理器下，获取到锁的线程睡眠，若恰好此时CPU调度的另一个执行线程也需要获取这个锁，则会造成死锁；多核处理器下，若想获取锁的线程在同一个处理器下，同样会造成死锁，若位于另外的处理器，则会长时间占用CPU等待睡眠的线程释放锁，从而浪费CPU资源。&lt;/p&gt;

&lt;p&gt;2.被自旋锁保护的临界区代码执行时不能被其他中断打断。&lt;/p&gt;

&lt;p&gt;3.被自旋锁保护的临界区代码在执行时，内核不能被抢占。&lt;/p&gt;

&lt;h4 id=&#34;自旋锁函数&#34;&gt;自旋锁函数&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// 最基本得自旋锁函数，它不失效本地中断。
void spin_lock(spinlock_t *lock);
// 在获得自旋锁之前禁用硬中断（只在本地处理器上），而先前的中断状态保存在flags中
void spin_lock_irqsave(spinlock_t *lock, unsigned long flags);
// 在获得自旋锁之前禁用硬中断（只在本地处理器上），不保存中断状态
void spin_lockirq(spinlock_t *lock);
// 在获得锁前禁用软中断，保持硬中断打开状态
void spin_lock_bh(spinlock_t *lock);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ticket锁&#34;&gt;TICKET锁&lt;/h2&gt;

&lt;p&gt;Ticket锁即排队自旋锁，Ticket锁是为了解决上面自旋锁的公平性问题，类似于现实中海底捞的排队叫号：锁拥有一个服务号，表示正在服务的线程，还有一个排队号；每个线程尝试获取锁之前先拿一个排队号，然后不断轮训锁的当前服务号是否是自己的排队号，如果是，则表示自己拥有了锁，不是则继续轮训。&lt;/p&gt;

&lt;p&gt;当前线程释放锁时，将服务号加1，这样下一个线程看到这个变化，就退出自旋，表示获取到锁。&lt;/p&gt;

&lt;h3 id=&#34;java中的自旋锁-1&#34;&gt;Java中的自旋锁&lt;/h3&gt;

&lt;p&gt;在JAVA中，我们可以使用原子变量和Unsafe类的CAS操作来实现Ticket自旋锁：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class TicketLock {
   private AtomicInteger serviceNum = new AtomicInteger(); // 服务号
   private AtomicInteger ticketNum = new AtomicInteger(); // 排队号

   public int lock() {
         // 首先原子性地获得一个排队号
         int myTicketNum = ticketNum.getAndIncrement();

         // 只要当前服务号不是自己的就不断轮询
       	while (serviceNum.get() != myTicketNum) {}

       	return myTicketNum;
    }

    public void unlock(int myTicket) {
        // 只有当前线程拥有者才能释放锁
        int next = myTicket + 1;
        serviceNum.compareAndSet(myTicket, next);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;缺点-1&#34;&gt;缺点&lt;/h4&gt;

&lt;p&gt;Ticket Lock 虽然解决了公平性的问题，但是多处理器系统上，每个进程/线程占用的处理器都在读写同一个变量&lt;code&gt;serviceNum&lt;/code&gt; ，每次读写操作都必须在多个处理器缓存之间进行缓存同步，这会导致繁重的系统总线和内存的流量，大大降低系统整体的性能。&lt;/p&gt;

&lt;h3 id=&#34;linux中的排队自旋锁&#34;&gt;Linux中的排队自旋锁&lt;/h3&gt;

&lt;p&gt;排队自旋锁(FIFO Ticket Spinlock)是Linux内核2.6.25版本引入的一种新型自旋锁，它解决了传统自旋锁由于无序竞争导致的&amp;rdquo;公平性&amp;rdquo;问题。但是由于排队自旋锁在一个共享变量上“自旋”，因此在锁竞争激烈的多核或 NUMA 系统上导致性能低下。&lt;/p&gt;

&lt;h2 id=&#34;mcs锁&#34;&gt;MCS锁&lt;/h2&gt;

&lt;p&gt;MCS自旋锁是一种基于链表的高性能、可扩展的自旋锁。申请线程之在本地变量上自旋，直接前驱负责通知其结束自旋，从而极大地减少了不必要的处理器缓存同步的次数，降低了总线和内存的开销。&lt;/p&gt;

&lt;p&gt;MCS锁的设计目标如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;保证自旋锁申请者以先进先出的顺序获取锁（FIFO Ordering）。&lt;/li&gt;
&lt;li&gt;只在本地可访问的标志变量上自旋。&lt;/li&gt;
&lt;li&gt;在处理器个数较少的系统中或锁竞争并不激烈的情况下，保持较高性能。&lt;/li&gt;
&lt;li&gt;自旋锁的空间复杂度（即锁数据结构和锁操作所需的空间开销）为常数。&lt;/li&gt;
&lt;li&gt;在没有处理器缓存一致性协议保证的系统中也能很好地工作。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;java中的mcs锁&#34;&gt;Java中的MCS锁&lt;/h3&gt;

&lt;p&gt;在JAVA中，我们可以使用原子变量和Unsafe类的CAS操作来实现MCS自旋锁：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class MCSLock {
    public static class MCSNode {
        volatile MCSNode next;
        volatile boolean isBlock = true; // 本地自旋变量，默认是在等待锁
    }

    volatile MCSNode queue;// 指向最后一个申请锁的MCSNode
    private static final AtomicReferenceFieldUpdater UPDATER = 
      AtomicReferenceFieldUpdater.newUpdater(MCSLock.class, MCSNode.class, &amp;quot;queue&amp;quot;);

    public void lock(MCSNode currentThread) {
        MCSNode predecessor = UPDATER.getAndSet(this, currentThread);// step 1
        if (predecessor != null) {
            predecessor.next = currentThread;// step 2

            while (currentThread.isBlock) {// step 3
            }
        }else { // 只有一个线程在使用锁，没有前驱来通知它，所以得自己标记自己为非阻塞
            currentThread.isBlock = false;
        }
    }

    public void unlock(MCSNode currentThread) {
        if (currentThread.isBlock) {// 锁拥有者进行释放锁才有意义
            return;
        }

        if (currentThread.next == null) {// 检查是否有人排在自己后面
            if (UPDATER.compareAndSet(this, currentThread, null)) {// step 4
                // compareAndSet返回true表示确实没有人排在自己后面
                return;
            } else {
                // 突然有人排在自己后面了，可能还不知道是谁，下面是等待后续者
                // 这里之所以要忙等是因为：step 1执行完后，step 2可能还没执行完
                while (currentThread.next == null) { // step 5
                }
            }
        }

        currentThread.next.isBlock = false;
        currentThread.next = null;// for GC
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;linux中的mcs锁&#34;&gt;Linux中的MCS锁&lt;/h3&gt;

&lt;p&gt;目前 Linux 内核尚未使用 MCS Spinlock。根据上节的算法描述，我们可以很容易地实现 MCS Spinlock。本文的实现针对x86 体系结构(包括 IA32 和 x86_64)。原子交换、比较-交换操作可以使用带 LOCK 前缀的 xchg(q)，cmpxchg(q)[3] 指令实现。&lt;/p&gt;

&lt;h2 id=&#34;clh锁&#34;&gt;CLH锁&lt;/h2&gt;

&lt;p&gt;CLH（Craig, Landin, and Hagersten）锁也是基于链表的可扩展、高性能、公平的自旋锁，申请线程旨在本地变量上自旋，它不断轮训前驱的状态，如果发现前驱释放了锁就结束自旋。&lt;/p&gt;

&lt;h3 id=&#34;java中的clh锁&#34;&gt;Java中的CLH锁&lt;/h3&gt;

&lt;p&gt;在Java中CLH的应用非常广泛，比如JUC包下的锁框架AbstractQueuedSynchronized就是基于CLH实现的，并进而实现了整个Lock框架体系。&lt;/p&gt;

&lt;p&gt;在JAVA中，我们可以使用原子变量和Unsafe类的CAS操作来实现CLH自旋锁：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class CLHLock {
    public static class CLHNode {
        private volatile boolean isLocked = true; // 默认是在等待锁
    }

    @SuppressWarnings(&amp;quot;unused&amp;quot; )
    private volatile CLHNode tail ;
    private static final AtomicReferenceFieldUpdater&amp;lt;CLHLock, CLHNode&amp;gt; UPDATER = AtomicReferenceFieldUpdater
                  . newUpdater(CLHLock.class, CLHNode .class , &amp;quot;tail&amp;quot; );

    public void lock(CLHNode currentThread) {
        CLHNode preNode = UPDATER.getAndSet( this, currentThread);
        if(preNode != null) {//已有线程占用了锁，进入自旋
            while(preNode.isLocked ) {
            }
        }
    }

    public void unlock(CLHNode currentThread) {
        // 如果队列里只有当前线程，则释放对当前线程的引用（for GC）。
        if (!UPDATER .compareAndSet(this, currentThread, null)) {
            // 还有后续线程
            currentThread. isLocked = false ;// 改变状态，让后续线程结束自旋
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;clh锁与mcs锁的比较&#34;&gt;CLH锁与MCS锁的比较&lt;/h2&gt;

&lt;p&gt;下图是经典的CLH锁和MCS锁队列图示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://coderbee.net/wp-content/uploads/2013/11/CLH-MCS-SpinLock.png&#34; alt=&#34;CLH和MCS&#34; /&gt;&lt;/p&gt;

&lt;p&gt;差异：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;从代码实现来看，CLH比MCS要简单得多。&lt;/li&gt;
&lt;li&gt;从自旋的条件来看，CLH是在前驱节点的属性上自旋，而MCS是在本地属性变量上自旋。&lt;/li&gt;
&lt;li&gt;从链表队列来看，CLH的队列是隐式的，CLHNode并不实际持有下一个节点；MCS的队列是物理存在的。&lt;/li&gt;
&lt;li&gt;CLH锁释放时只需要改变自己的属性，MCS锁释放则需要改变后继节点的属性。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;注意：这里实现的锁都是独占的，且不能重入的。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ibm.com/developerworks/cn/linux/l-cn-mcsspinlock/&#34;&gt;高性能自旋锁 MCS Spinlock 的设计与实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/hdflzh/p/3716156.html&#34;&gt;高效编程之互斥锁和自旋锁的一些知识&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://my.oschina.net/MinGKai/blog/188522&#34;&gt;基于队列的锁:mcs lock简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/vividonly/article/details/6594195&#34;&gt;深入理解linux内核自旋锁&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Java锁框架概述</title>
      <link>http://nituchao.com/post/juc.lock/lock-summary/</link>
      <pubDate>Thu, 23 Feb 2017 18:28:27 +0800</pubDate>
      
      <guid>http://nituchao.com/post/juc.lock/lock-summary/</guid>
      <description>

&lt;p&gt;在Java中关于锁有两个体系，一个是synchronized代表的对象监视器同步锁，一个是以AQS为基础的锁框架，该框架位于java.uti.concurrent包下。&lt;/p&gt;

&lt;h2 id=&#34;aqs框架原理-aqs框架图-file-users-liang-library-group-20containers-ubf8t346g9-office-msoclip1-01-65cceb69-4317-8645-9279-f8aa33dad044-png&#34;&gt;AQS框架原理&lt;img src=&#34;file:////Users/liang/Library/Group%20Containers/UBF8T346G9.Office/msoclip1/01/65CCEB69-4317-8645-9279-F8AA33DAD044.png&#34; alt=&#34;AQS框架图&#34; /&gt;&lt;/h2&gt;

&lt;h2 id=&#34;juc包中的锁&#34;&gt;JUC包中的锁&lt;/h2&gt;

&lt;p&gt;相比同步锁，JUC包中的锁的功能更加强大，它为锁提供了一个框架，该框架允许更灵活地使用锁，只是它的用法更难罢了。&lt;/p&gt;

&lt;p&gt;JUC包中的锁，包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lock接口&lt;/li&gt;
&lt;li&gt;ReadWriteLock接口&lt;/li&gt;
&lt;li&gt;Condition接口&lt;/li&gt;
&lt;li&gt;ReentrantLock独占锁&lt;/li&gt;
&lt;li&gt;ReentrantReadWriteLock读写锁&lt;/li&gt;
&lt;li&gt;CountDownLatch&lt;/li&gt;
&lt;li&gt;CyclicBarrier&lt;/li&gt;
&lt;li&gt;Semaphore&lt;/li&gt;
&lt;li&gt;AbstractOwnableSynchronizer抽象类&lt;/li&gt;
&lt;li&gt;AbstractQueuedSynchronizer抽象类&lt;/li&gt;
&lt;li&gt;AbstractQueuedLongSynchronizer抽象类&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>