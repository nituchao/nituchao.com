<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on 泥土巢</title>
    <link>http://nituchao.com/categories/java/index.xml</link>
    <description>Recent content in Java on 泥土巢</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2017, nituchao | All rights reserved.</copyright>
    <atom:link href="http://nituchao.com/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>服务器端与客户端加密通信设计</title>
      <link>http://nituchao.com/post/2014/fu-wu-duan-yu-ke-hu-duan-jia-mi-tong-xin-she-ji/</link>
      <pubDate>Sat, 12 Jul 2014 19:19:00 +0800</pubDate>
      
      <guid>http://nituchao.com/post/2014/fu-wu-duan-yu-ke-hu-duan-jia-mi-tong-xin-she-ji/</guid>
      <description>

&lt;p&gt;最近的一个项目涉及到服务器与Android客户端交换一些敏感数据，这部分数据必须要经过安全加密后才能在Android与服务器间传递，然后再解密后进行相关的业务操作，而且要做到，即使客户端被恶意反编译，已经发送的数据也不会被破解。&lt;/p&gt;

&lt;p&gt;我们首先想到的是对称加密算法&lt;code&gt;AES&lt;/code&gt;和&lt;code&gt;DES&lt;/code&gt;,但是，如果客户端被恶意反编译，客户端写死的密钥就会被拿到，已经发送的数据就很容易被破解了，因此，安全上，对称加密不满足我们的需求。&lt;/p&gt;

&lt;p&gt;我们很快想到了非对称加密算法&lt;code&gt;RSA&lt;/code&gt;，即使黑客拿到了客户端的公钥，没有私钥还是无法破解已经发送的数据包，但是，&lt;code&gt;RSA&lt;/code&gt;算法速度非常慢，而且一次最多加密128位的数据，虽然安全上满足需求，速度和操作复杂度上还是存在一些硬伤。&lt;/p&gt;

&lt;p&gt;于是，我们的解决办法是联合使用&lt;code&gt;RSA&lt;/code&gt;和&lt;code&gt;AES&lt;/code&gt;算法，具体的做法是，客户端提交的正文内容使用&lt;code&gt;AES&lt;/code&gt;加密，&lt;code&gt;AES&lt;/code&gt;加密时的密钥由客户端随机生成，然后把随机生成的密钥使用&lt;code&gt;RSA&lt;/code&gt;算法加密后与正文内容加密后的密文一起提交给服务器端，服务器端先用自己的&lt;code&gt;RSA&lt;/code&gt;私钥解密&lt;code&gt;AES&lt;/code&gt;算法的密钥，然后用&lt;code&gt;AES&lt;/code&gt;算法配合解密出的密钥解密正文内容。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://olno3yiqc.bkt.clouddn.com/blog/img/RSA_1934751b.jpg&#34; width=800px height=600px alt=&#34;RSA&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;交互过程&#34;&gt;交互过程&lt;/h2&gt;

&lt;p&gt;客户端提交内容如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
{
    msgkey: &amp;quot;f7l1mKVA3TVUf9F/lUIM30bzHG+PxXEOoO3vZ0N8ulsyPu8IaO/wmKAlOqUyIHwLtQnCOU2&amp;quot;, 
    msgtxt: &amp;quot;MuoJ+HrOJzneiFwvBcOV8loBhRS0LjbmRyWkvSs0C2w=&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;msgtxt是客户端提交的正文内容经过&lt;code&gt;AES&lt;/code&gt;算法加密后的密文，&lt;code&gt;AES&lt;/code&gt;加密时的密钥key由客户端随机生成。&lt;/li&gt;
&lt;li&gt;msgkey是&lt;code&gt;AES&lt;/code&gt;算法加密时用到的密钥key经过客户端&lt;code&gt;RSA&lt;/code&gt;算法加密后的密文，&lt;code&gt;RSA&lt;/code&gt;加密时的公钥由服务器端提供并固定内置的客户端。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下是交互图:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://olno3yiqc.bkt.clouddn.com/blog/img/rsa-aes.jpg&#34; width=800 height=600 alt=&#34;rsa-aes&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;rsa工具类&#34;&gt;RSA工具类&lt;/h2&gt;

&lt;p&gt;以下是我们用到的RSA加密/解密算法，该算法服务器端和客户端必须同时使用:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.xiaomi.miui.sec.common;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigInteger;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.RSAPrivateKeySpec;
import java.security.spec.RSAPublicKeySpec;
import java.util.HashMap;

import javax.crypto.Cipher;

/**
 * RSA工具类
 * Created by liang on 7/9/14.
 */

public class RSAUtils {

    /**
     * 生成公钥和私钥
     *
     * @throws NoSuchAlgorithmException
     */
    public static HashMap&amp;lt;String, Object&amp;gt; getKeys() throws NoSuchAlgorithmException {
        HashMap&amp;lt;String, Object&amp;gt; map = new HashMap&amp;lt;String, Object&amp;gt;();
        KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(&amp;quot;RSA&amp;quot;);
        keyPairGen.initialize(1024);
        KeyPair keyPair = keyPairGen.generateKeyPair();
        RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();
        RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();
        map.put(&amp;quot;public&amp;quot;, publicKey);
        map.put(&amp;quot;private&amp;quot;, privateKey);
        return map;
    }

    /**
     * 使用模和指数生成RSA公钥
     * 注意：【此代码用了默认补位方式，为RSA/None/PKCS1Padding，不同JDK默认的补位方式可能不同，如Android默认是RSA/None/NoPadding】
     *
     * @param modulus  模
     * @param exponent 指数
     * @return
     */
    public static RSAPublicKey getPublicKey(String modulus, String exponent) {
        try {
            BigInteger b1 = new BigInteger(modulus);
            BigInteger b2 = new BigInteger(exponent);
            KeyFactory keyFactory = KeyFactory.getInstance(&amp;quot;RSA&amp;quot;);
            RSAPublicKeySpec keySpec = new RSAPublicKeySpec(b1, b2);
            return (RSAPublicKey) keyFactory.generatePublic(keySpec);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * 使用模和指数生成RSA私钥
     * 注意：【此代码用了默认补位方式，为RSA/None/PKCS1Padding，不同JDK默认的补位方式可能不同，如Android默认是RSA/None/NoPadding】
     *
     * @param modulus  模
     * @param exponent 指数
     * @return
     */
    public static RSAPrivateKey getPrivateKey(String modulus, String exponent) {
        try {
            BigInteger b1 = new BigInteger(modulus);
            BigInteger b2 = new BigInteger(exponent);
            KeyFactory keyFactory = KeyFactory.getInstance(&amp;quot;RSA&amp;quot;);
            RSAPrivateKeySpec keySpec = new RSAPrivateKeySpec(b1, b2);
            return (RSAPrivateKey) keyFactory.generatePrivate(keySpec);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * 公钥加密
     *
     * @param data
     * @param publicKey
     * @return
     * @throws Exception
     */
    public static String encryptByPublicKey(String data, RSAPublicKey publicKey) throws Exception {
        Cipher cipher = Cipher.getInstance(&amp;quot;RSA/ECB/PKCS1Padding&amp;quot;);
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);
        // 模长
        int key_len = publicKey.getModulus().bitLength() / 8;
        // 加密数据长度 &amp;lt;= 模长-11
        String[] datas = splitString(data, key_len - 11);
        String mi = &amp;quot;&amp;quot;;
        //如果明文长度大于模长-11则要分组加密
        for (String s : datas) {
            mi += bcd2Str(cipher.doFinal(s.getBytes()));
        }
        return mi;
    }

    /**
     * 私钥解密
     *
     * @param data
     * @param privateKey
     * @return
     * @throws Exception
     */
    public static String decryptByPrivateKey(String data, RSAPrivateKey privateKey) throws Exception {
        Cipher cipher = Cipher.getInstance(&amp;quot;RSA/ECB/PKCS1Padding&amp;quot;);
        cipher.init(Cipher.DECRYPT_MODE, privateKey);
        //模长
        int key_len = privateKey.getModulus().bitLength() / 8;
        byte[] bytes = data.getBytes();
        byte[] bcd = ASCII_To_BCD(bytes, bytes.length);
        System.err.println(bcd.length);
        //如果密文长度大于模长则要分组解密
        String ming = &amp;quot;&amp;quot;;
        byte[][] arrays = splitArray(bcd, key_len);
        for (byte[] arr : arrays) {
            ming += new String(cipher.doFinal(arr));
        }
        return ming;
    }

    /**
     * ASCII码转BCD码
     */
    public static byte[] ASCII_To_BCD(byte[] ascii, int asc_len) {
        byte[] bcd = new byte[asc_len / 2];
        int j = 0;
        for (int i = 0; i &amp;lt; (asc_len + 1) / 2; i++) {
            bcd[i] = asc_to_bcd(ascii[j++]);
            bcd[i] = (byte) (((j &amp;gt;= asc_len) ? 0x00 : asc_to_bcd(ascii[j++])) + (bcd[i] &amp;lt;&amp;lt; 4));
        }
        return bcd;
    }

    public static byte asc_to_bcd(byte asc) {
        byte bcd;

        if ((asc &amp;gt;= &#39;0&#39;) &amp;amp;&amp;amp; (asc &amp;lt;= &#39;9&#39;))
            bcd = (byte) (asc - &#39;0&#39;);
        else if ((asc &amp;gt;= &#39;A&#39;) &amp;amp;&amp;amp; (asc &amp;lt;= &#39;F&#39;))
            bcd = (byte) (asc - &#39;A&#39; + 10);
        else if ((asc &amp;gt;= &#39;a&#39;) &amp;amp;&amp;amp; (asc &amp;lt;= &#39;f&#39;))
            bcd = (byte) (asc - &#39;a&#39; + 10);
        else
            bcd = (byte) (asc - 48);
        return bcd;
    }

    /**
     * BCD转字符串
     */
    public static String bcd2Str(byte[] bytes) {
        char temp[] = new char[bytes.length * 2], val;

        for (int i = 0; i &amp;lt; bytes.length; i++) {
            val = (char) (((bytes[i] &amp;amp; 0xf0) &amp;gt;&amp;gt; 4) &amp;amp; 0x0f);
            temp[i * 2] = (char) (val &amp;gt; 9 ? val + &#39;A&#39; - 10 : val + &#39;0&#39;);

            val = (char) (bytes[i] &amp;amp; 0x0f);
            temp[i * 2 + 1] = (char) (val &amp;gt; 9 ? val + &#39;A&#39; - 10 : val + &#39;0&#39;);
        }
        return new String(temp);
    }

    /**
     * 拆分字符串
     */
    public static String[] splitString(String string, int len) {
        int x = string.length() / len;
        int y = string.length() % len;
        int z = 0;
        if (y != 0) {
            z = 1;
        }
        String[] strings = new String[x + z];
        String str = &amp;quot;&amp;quot;;
        for (int i = 0; i &amp;lt; x + z; i++) {
            if (i == x + z - 1 &amp;amp;&amp;amp; y != 0) {
                str = string.substring(i * len, i * len + y);
            } else {
                str = string.substring(i * len, i * len + len);
            }
            strings[i] = str;
        }
        return strings;
    }

    /**
     * 拆分数组
     */
    public static byte[][] splitArray(byte[] data, int len) {
        int x = data.length / len;
        int y = data.length % len;
        int z = 0;
        if (y != 0) {
            z = 1;
        }
        byte[][] arrays = new byte[x + z][];
        byte[] arr;
        for (int i = 0; i &amp;lt; x + z; i++) {
            arr = new byte[len];
            if (i == x + z - 1 &amp;amp;&amp;amp; y != 0) {
                System.arraycopy(data, i * len, arr, 0, y);
            } else {
                System.arraycopy(data, i * len, arr, 0, len);
            }
            arrays[i] = arr;
        }
        return arrays;
    }

	/**
	* 测试
	*/
    public static void main(String[] args) throws Exception {
        // TODO Auto-generated method stub
        HashMap&amp;lt;String, Object&amp;gt; map = RSAUtils.getKeys();
        //生成公钥和私钥
        RSAPublicKey publicKey = (RSAPublicKey) map.get(&amp;quot;public&amp;quot;);
        RSAPrivateKey privateKey = (RSAPrivateKey) map.get(&amp;quot;private&amp;quot;);

        //模
        String modulus = publicKey.getModulus().toString();
        //公钥指数
        String public_exponent = publicKey.getPublicExponent().toString();
        //私钥指数
        String private_exponent = privateKey.getPrivateExponent().toString();
        //明文
        String ming = &amp;quot;XiaomiPostSmsPublicKey&amp;quot;;

        //使用模和指数生成公钥和私钥
        RSAPublicKey pubKey = RSAUtils.getPublicKey(modulus, public_exponent);
        RSAPrivateKey priKey = RSAUtils.getPrivateKey(modulus, private_exponent);

        RSAPublicKey tmpPubKey = null;
        RSAPrivateKey tmpPriKey = null;

		// 将成对的公钥和私钥序列化到文件，这样就可以内置到客户端和服务器端了
        try{
            ObjectOutputStream publicKeyOutput = new ObjectOutputStream(new FileOutputStream(&amp;quot;/home/work/rsapubkey&amp;quot;));
            publicKeyOutput.writeObject(pubKey);

            ObjectOutputStream privateKeyOutput = new ObjectOutputStream(new FileOutputStream(&amp;quot;/home/work/rsaprikey&amp;quot;));
            privateKeyOutput.writeObject(priKey);

            ObjectInputStream publicKeyInput = new ObjectInputStream(new FileInputStream(&amp;quot;/home/work/rsapubkey&amp;quot;));
            tmpPubKey = (RSAPublicKey) publicKeyInput.readObject();

            ObjectInputStream privateKeyInput = new ObjectInputStream(new FileInputStream(&amp;quot;/home/work/rsaprikey&amp;quot;));
            tmpPriKey = (RSAPrivateKey) privateKeyInput.readObject();
        }catch(Exception e){
            e.printStackTrace();
        }

        //加密后的密文
        String mi = RSAUtils.encryptByPublicKey(ming, tmpPubKey);
        System.err.println(mi);
        //解密后的明文
        ming = RSAUtils.decryptByPrivateKey(mi, tmpPriKey);
        System.err.println(ming);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;需要特别注意的地方&#34;&gt;需要特别注意的地方&lt;/h2&gt;

&lt;p&gt;由于Java JDK和Android JDK在实例化&lt;code&gt;Cipher&lt;/code&gt;对象时使用不同的算法，比如:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Java:
Cipher cipher = Cipher.getInstance(&amp;quot;RSA/ECB/PKCS1Padding&amp;quot;);

Android:
Cipher cipher = Cipher.getInstance(&amp;quot;RSA/ECB/NoPadding&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因此，如果使用默认算法的话，会出现Android客户端加密数据无法在服务器端解密的错误，比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;javax.crypto.BadPaddingException: Decryption error
    at sun.security.rsa.RSAPadding.unpadV15(RSAPadding.java:311)
    at sun.security.rsa.RSAPadding.unpad(RSAPadding.java:255)
    at com.sun.crypto.provider.RSACipher.a(DashoA13*..)
    at com.sun.crypto.provider.RSACipher.engineDoFinal(DashoA13*..)
    at javax.crypto.Cipher.doFinal(DashoA13*..)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所以，上文中给出的&lt;code&gt;RSAUtils.java&lt;/code&gt;中无论是加密方法还是解密方法，我都使用的是一样的算法(&lt;strong&gt;RSA/ECB/PKCS1Padding&lt;/strong&gt;)，而不是默认的算法(&lt;strong&gt;RSA&lt;/strong&gt;)，这样就可以完美解决问题了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Apache CXF解析Map/HashMap</title>
      <link>http://nituchao.com/post/2013/apache-cxf-parse-hash-map/</link>
      <pubDate>Wed, 11 Dec 2013 14:06:00 +0800</pubDate>
      
      <guid>http://nituchao.com/post/2013/apache-cxf-parse-hash-map/</guid>
      <description>

&lt;p&gt;项目中WebService框架用的是Apache CXF，但是在使用中发现Apache CXF不支持解析Map和HashMap，而且SOAP报文(XML)和JavaBean的转化是通过JAXB实现的，没办法，自己写了个Map到XML的适配器，来实现两者的转化。&lt;/p&gt;

&lt;h2 id=&#34;map适配器&#34;&gt;Map适配器&lt;/h2&gt;

&lt;p&gt;MapAdapter用来完成Java的Map类型与XML中对应节点的转换。&lt;/p&gt;

&lt;p&gt;以MapAdatper为中心，一边是XML类型的SOAP报文，一边是以HashMap为元素的list列表。通过以下两个方法完成双向转换:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;unmarshal: 完成XML到JAVA的转换。&lt;/li&gt;
&lt;li&gt;marshal: 完成JAVA到XML的转换。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;该适配器会通过注解在具体的实体类上指定。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import java.util.HashMap;
import java.util.Map;


import javax.xml.bind.annotation.adapters.XmlAdapter;


/**
 * Map适配器，完成Java中map与XML中对应节点的转换
 * 
 * &amp;lt;p&amp;gt;
 * detailed comment
 * @author zWX184091 2013-8-15
 * @see
 * @since 1.0
 */
public class MapAdapter extends XmlAdapter&amp;lt;MapConvertor, HashMap&amp;lt;String, String&amp;gt;&amp;gt;
{


    /**
     * XML to JAVA
     * 
     * @param map
     * @return HashMap&amp;lt;String, String&amp;gt;
     * @throws Exception
     */
    @Override
    public HashMap&amp;lt;String, String&amp;gt; unmarshal(MapConvertor map) throws Exception
    {
        // TODO Auto-generated method stub
        HashMap&amp;lt;String, String&amp;gt; result = new HashMap&amp;lt;String, String&amp;gt;();

        // 遍历MapConvertor，将XML节点内容写入JavaBean Map对象
        for (MapConvertor.MapEntry e : map.getEntry())
        {
            result.put(e.getKey(), e.getValue());
        }
        return result;
    }


    /**
     * JAVA to XML
     * 
     * @param map
     * @return MapConvertor
     * @throws Exception
     */
    @Override
    public MapConvertor marshal(HashMap&amp;lt;String, String&amp;gt; map) throws Exception
    {


        // 创建MapConvertor对象，盛放XML节点内容
        MapConvertor convertor = new MapConvertor();


        // 遍历map，将JavaBean中数据写入XML节点
        for (Map.Entry&amp;lt;String, String&amp;gt; entry : map.entrySet())
        {
            // 创建空的MapEntry对象(该mapEntry应该放在循环内，防止重复使用同一个java对象引用)
            MapConvertor.MapEntry mapEntry = new MapConvertor.MapEntry();


            mapEntry.setKey(entry.getKey());
            mapEntry.setValue(entry.getValue());


            convertor.addEntry(mapEntry);
        }
        return convertor;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;map转换器&#34;&gt;Map转换器&lt;/h2&gt;

&lt;p&gt;Map转换器中聚合了一个元素为MapEntry的list集合对象，MapEntry中聚合了一个String类型的key成员和一个String类型的value成员，用来完成和Java中的HashMap的对接。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import java.util.ArrayList;
import java.util.List;
import java.util.Map.Entry;


import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;


/**
 * Map转换器
 * 
 * &amp;lt;p&amp;gt;
 * detailed comment
 * @author zWX184091 2013-7-31
 * @see
 * @since 1.0
 */
@XmlType(name = &amp;quot;MapConvertor&amp;quot;)
@XmlAccessorType(XmlAccessType.FIELD)
public class MapConvertor
{


    // SOAP报文结构是一个Map的List
    private List&amp;lt;MapEntry&amp;gt; entry = new ArrayList&amp;lt;MapEntry&amp;gt;();


    public void addEntry(MapEntry entry)
    {
        this.entry.add(entry);
    }


    public List&amp;lt;MapEntry&amp;gt; getEntry()
    {
        return entry;
    }


    public void setEntry(List&amp;lt;MapEntry&amp;gt; entry)
    {
        this.entry = entry;
    }


    public static class MapEntry
    {
        private String key;


        private String value;


        public MapEntry()
        {
            super();
        }


        public MapEntry(String key, String value)
        {
            super();
            this.key = key;
            this.value = value;
        }


        public MapEntry(Entry&amp;lt;String, String&amp;gt; entry)
        {
            super();
            this.key = entry.getKey();
            this.value = entry.getValue();
        }


        public String getKey()
        {
            return key;
        }


        public String getValue()
        {
            return value;
        }


        public void setKey(String key)
        {
            this.key = key;
        }


        public void setValue(String value)
        {
            this.value = value;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;实体类&#34;&gt;实体类&lt;/h2&gt;

&lt;p&gt;SigParam是一个Java的实体类，该类的成员变量是一个以HashMap为元素的List列表。在get方法上通过注解@XmlJavaTypeAdapter来指定解析类。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class SigParam
{
    // SOAP报文结构是一个Map的集合(List)
    private List&amp;lt;HashMap&amp;lt;String, String&amp;gt;&amp;gt; entry;


    public SigParam(List&amp;lt;HashMap&amp;lt;String, String&amp;gt;&amp;gt; entry)
    {
        super();
        this.entry = entry;
    }


    public SigParam()
    {
        super();
    }


    @XmlElement(name = &amp;quot;string2stringMap&amp;quot;)
    @XmlJavaTypeAdapter(MapAdapter.class)
    public List&amp;lt;HashMap&amp;lt;String, String&amp;gt;&amp;gt; getEntry()
    {
        return entry;
    }


    public void setEntry(List&amp;lt;HashMap&amp;lt;String, String&amp;gt;&amp;gt; entry)
    {
        this.entry = entry;
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;soap报文内容&#34;&gt;SOAP报文内容&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;soapenv:Envelope xmlns:soapenv=&amp;quot;http://schemas.xmlsoap.org/soap/envelope/&amp;quot; 
                  xmlns:ser=&amp;quot;http://service.ws.userinterface.sa.security.com/&amp;quot;&amp;gt;
   &amp;lt;soapenv:Header&amp;gt;
      &amp;lt;userId&amp;gt;WHITE_GROUP_ADD_001&amp;lt;/userId&amp;gt;
      &amp;lt;password&amp;gt;000&amp;lt;/password&amp;gt;
   &amp;lt;/soapenv:Header&amp;gt;
   &amp;lt;soapenv:Body&amp;gt;
      &amp;lt;ser:execute&amp;gt;
         &amp;lt;arg0&amp;gt;
            &amp;lt;records&amp;gt;
               &amp;lt;string2stringMap&amp;gt;
                  &amp;lt;entry&amp;gt;
                     &amp;lt;key&amp;gt;groupName&amp;lt;/key&amp;gt;
                     &amp;lt;value&amp;gt;Hello_ggood&amp;lt;/value&amp;gt;
                  &amp;lt;/entry&amp;gt;
                  &amp;lt;entry&amp;gt;
                     &amp;lt;key&amp;gt;adName&amp;lt;/key&amp;gt;
                     &amp;lt;value&amp;gt;最后一次测试&amp;lt;/value&amp;gt;
                  &amp;lt;/entry&amp;gt;
                  &amp;lt;entry&amp;gt;
                     &amp;lt;key&amp;gt;time&amp;lt;/key&amp;gt;
                     &amp;lt;value&amp;gt;0909&amp;lt;/value&amp;gt;
                  &amp;lt;/entry&amp;gt;
               &amp;lt;/string2stringMap&amp;gt;
            &amp;lt;/records&amp;gt;
            &amp;lt;taskCode&amp;gt;WHITE_GROUP_ADD_001&amp;lt;/taskCode&amp;gt;
         &amp;lt;/arg0&amp;gt;
      &amp;lt;/ser:execute&amp;gt;
   &amp;lt;/soapenv:Body&amp;gt;
&amp;lt;/soapenv:Envelope&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;原生的JAXB支持简单的XML结构到JAVA实体类的解析。通过上面的Map适配器MapAdapter可以完成XML类型中比较复杂的数据结构的解析，比如：HashMap。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>