<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Abc_atomic on 泥土巢</title>
    <link>http://nituchao.com/categories/abc_atomic/index.xml</link>
    <description>Recent content in Abc_atomic on 泥土巢</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2017, nituchao | All rights reserved.</copyright>
    <atom:link href="http://nituchao.com/categories/abc_atomic/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Atomic变量</title>
      <link>http://nituchao.com/post/juc.atomic/atomic-summary/</link>
      <pubDate>Thu, 23 Feb 2017 18:39:27 +0800</pubDate>
      
      <guid>http://nituchao.com/post/juc.atomic/atomic-summary/</guid>
      <description>&lt;p&gt;Java原子变量的诞生源自一个简单的需求 —— 多个线程共享某个变量或者对象时，需要对修改和读取操作进行同步。&lt;/p&gt;

&lt;p&gt;同步包含两层含义：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;互斥访问&lt;/li&gt;
&lt;li&gt;可见性&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;通常，多线程对临界资源的互斥访问通过对象锁(synchronized关键字)保证。对象锁是一种独占锁（悲观锁），会导致其它所有需要锁的线程挂起。而可见性则由volatile的内存语义保证。&lt;/p&gt;

&lt;p&gt;Java 1.5开始提供了原子变量和原子引用，这些类放置在&lt;code&gt;java.util.concurrent&lt;/code&gt;下。大概可以归为4类：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;基本类型：AtomicInteger, AtomicLong, AtomicBoolean;&lt;/li&gt;
&lt;li&gt;数组类型：AtomicIntegerArray, AtomicLongArray, AtomicReferenceArray;&lt;/li&gt;
&lt;li&gt;引用类型：AtomicReference, AtomicStampedReference, AtomicMarkableReference;&lt;/li&gt;
&lt;li&gt;对象的属性修改类型：AtomicIntegerFieldUpdater, AtomicLongFieldUpdater, AtomicReferenceFieldUpdater;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Java原子变量的存在是为了对相应的数据进行原子操作。&lt;/p&gt;

&lt;p&gt;所谓的原子操作包含下面几层含义：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;操作过程不会被中断。&lt;/li&gt;
&lt;li&gt;操作过程不会被阻塞。&lt;/li&gt;
&lt;li&gt;修改结果被其他线程可见。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>AtomicLong源码分析</title>
      <link>http://nituchao.com/post/juc.atomic/atomic-long/</link>
      <pubDate>Thu, 23 Feb 2017 18:30:28 +0800</pubDate>
      
      <guid>http://nituchao.com/post/juc.atomic/atomic-long/</guid>
      <description>

&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;

&lt;p&gt;在原子变量相关类中，AtomicBoolean, AtomicInteger, AtomicLong三个类是对于基本数据类型的操作，其原理和用法类似，区别在于Boolean, Integer, Long分别是8位，32位，64位的类型，本文重点研究AtomicLong。&lt;/p&gt;

&lt;p&gt;Boolean类型数据长度为8位，Integer类型数据是32位，在当前32位操作系统或者64位操作中都能够直接对其进行原子修改和读取。而Long类型数据是64位，在32位JVM上会当做两个分离的32位来进行操作，所以本身不具备原子性。&lt;/p&gt;

&lt;p&gt;还好我们现在的JDK基本都已经更新到64位，对long型数据的直接修改不存在原子性问题，但是当出现运算操作(比如++, —等)时还是会出现性问题，AtomicLong的目的是实现Long类型数据的各种原子操作。&lt;/p&gt;

&lt;p&gt;Java原子变量的实现依赖于&lt;code&gt;sun.misc.Unsafe&lt;/code&gt;的CAS操作和volatile的内存可见性语义。&lt;/p&gt;

&lt;p&gt;本文基于JDK1.7.0_67&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;java version &amp;ldquo;1.7.0&lt;em&gt;67&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;_Java&amp;trade; SE Runtime Environment (build 1.7.0_67-b01)&lt;/p&gt;

&lt;p&gt;Java HotSpot&amp;trade; 64-Bit Server VM (build 24.65-b04, mixed mode)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;成员变量&#34;&gt;成员变量&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 成员变量unsafe是原子变量相关操作的基础
// 原子变量的修改操作最终有sun.misc.Unsafe类的CAS操作实现
private static final Unsafe unsafe = Unsafe.getUnsafe();
// 成员变量value的内存偏移值，在静态代码块中初始化
private static final long valueOffset;
// 通过volatile关键字保证可见性，用于保存值
private volatile long value;

static {
  try {
    valueOffset = unsafe.objectFieldOffset
      	(AtomicLong.class.getDeclaredField(&amp;quot;value&amp;quot;));
  } catch (Exception ex) { throw new Error(ex); }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;函数列表&#34;&gt;函数列表&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 构造函数，初始化值为0
public AtomicLong()
// 构造函数，指定初始化值
public AtomicLong(long initialValue)
// 以原子方式获取当前值
public final long get()
// 以原子方式设置当前值为newValue
// 赋值语句是单操作，所以本身具有原子性
public final void set(long newValue)
// 最后设置为给定值。延时设置变量值，这个等价于set()方法，
// 但是由于字段是volatile类型的，因此此字段的修改会比普通字段
//（非volatile字段）有稍微的时间延时（尽管可以忽略），所以如果
// 不是想立即读取设置的新值，允许在“后台”修改值，那么此方法就很
// 有用。如果还是难以理解，这里就类似于启动一个后台线程如执行修
// 改新值的任务，原线程就不等待修改结果立即返回。
public final void lazySet(long newValue)
// 以原子方式设置当前值为newValue，并返回旧值
public final long getAndSet(long newValue)
// 以原子方式设置当前值为update。
// 如果当前值等于expect，并设置成功，返回true
// 如果当前值不等于expect，则设置失败，返回false
// 该过程不阻塞
public final boolean compareAndSet(long expect, long update)
// 以原子方式设置当前值为update。
// 如果当前值等于expect，并设置成功，返回true
// 如果当前值不等于expect，则设置失败，返回false
// 该过程不阻塞
// 该过程不保证volatile成员的happens-before语义顺序
public final boolean weakCompareAndSet(long expect, long update)
// 以原子的方式将当前值加1
// 该过程以自旋锁的形似循环执行，直到操作成功
// 该过程不会阻塞
// 返回更新前的值
public final long getAndIncrement()
// 以原子的方式将当前值减1
// 该过程以自旋的形式循环执行，直到操作成功
// 该过程不会阻塞
// 返回更新前的值
public final long getAndDecrement()
// 以原子方式将原值加上给定的delta
// 该过程以自旋的形式循环执行，直到操作成功
// 该过程不会阻塞
// 返回更新前的值
public final long getAndAdd(long delta)
// 以原子方式将原值加1
// 该过程以自旋的形式循环执行，直到操作成功
// 该过程不会阻塞
// 返回更新后的值
public final long incrementAndGet()
// 以原子方式将原值减1
// 该过程以自旋的形式循环执行，直到操作成功
// 该过程不会阻塞
// 返回更新后的值
public final long decrementAndGet()
// 以原子方式将原值加上给定的delta
// 该过程以自旋的形式循环执行，直到操作成功
// 该过程不会阻塞
// 返回更新后的值
public final long addAndGet(long delta)
// 将当前值使用Long的静态方法转换成String类型，并返回
public String toString()
// 将当前值使用强制类型转换成int类型，并返回
public int intValue()
// 直接返回当前值
public long longValue()
// 将当前值使用强制类型转换成float类型，并返回
public float floatValue()
// 将当前值使用强制类型转换成double类型，并返回
public double doubleValue()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;重点函数分析&#34;&gt;重点函数分析&lt;/h2&gt;

&lt;h3 id=&#34;set&#34;&gt;set&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public final void set(long newValue) {
	value = newValue;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以原子方式设置当前值为newValue，因为set方法只是一个单操作的赋值语句，因此是原子的。加上volatile的内存可见性保证，Set是原子操作无疑。&lt;/p&gt;

&lt;h3 id=&#34;lazyset&#34;&gt;lazySet&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public final void lazySet(long newValue) {
  	unsafe.putOrderedLong(this, valueOffset, newValue);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;简单点说，lazySet优先保证数据的修改操作，而降低对可见性的要求。&lt;/p&gt;

&lt;p&gt;lazySet是使用Unsafe.putOrderedObject方法，这个方法在对低延迟代码是很有用的，它能够实现非堵塞的写入，这些写入不会被Java的JIT重新排序指令(&lt;a href=&#34;http://stackoverflow.com/questions/14321212/java-instruction-reordering-cache-in-threads&#34;&gt;instruction reordering&lt;/a&gt;)，这样它使用快速的存储-存储(store-store) barrier, 而不是较慢的存储-加载(store-load) barrier, 后者总是用在volatile的写操作上，这种性能提升是有代价的，虽然便宜，也就是写后结果并不会被其他线程看到，甚至是自己的线程，通常是几纳秒后被其他线程看到，这个时间比较短，所以代价可以忍受。&lt;/p&gt;

&lt;p&gt;类似Unsafe.putOrderedObject还有unsafe.putOrderedLong等方法，unsafe.putOrderedLong比使用 volatile long要快3倍左右。&lt;/p&gt;

&lt;h3 id=&#34;compareandset&#34;&gt;compareAndSet&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public final boolean compareAndSet(long expect, long update) {
	return unsafe.compareAndSwapLong(this, valueOffset, expect, update);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以原子方式设置当前值为update。如果当前值等于expect，并设置成功，返回true。如果当前值不等于expect，则设置失败，返回false。该过程不阻塞。由于是使用了&lt;code&gt;sun.misc.Unsafe&lt;/code&gt;的CAS操作实现，它是原子操作无疑。&lt;/p&gt;

&lt;p&gt;_&lt;em&gt;set和compareAndSet都是原子操作，只是他们的目的不同，set只是单纯想设置一个新的值。而compareAndSet则是希望在满足一定条件的情况下(当前值等于except)再设置新的值。&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;weakcompareandset&#34;&gt;weakCompareAndSet&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public final boolean weakCompareAndSet(long expect, long update) {
	return unsafe.compareAndSwapLong(this, valueOffset, expect, update);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以原子方式设置当前值为update。它的实现与compareAndSet完全一致。JDK文档中说，weakCompareAndSet在更新变量时并不创建任何&lt;code&gt;happens-before&lt;/code&gt;顺序，因此即使要修改的值是volatile的，也不保证对该变量的读写操作的顺序（一般来讲，volatile的内存语义保证&lt;code&gt;happens-before&lt;/code&gt;顺序）。&lt;/p&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/timlearn/p/4127616.html&#34;&gt;Java并发——原子变量和原子操作&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/1468007/atomicinteger-lazyset-vs-set&#34;&gt;AtomicInteger lazySet vs set&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/19238594/java-atomic-variable-set-vs-compareandset&#34;&gt;Java Atomic Variable set() vs compareAndSet()&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>AtomicLongArray源码分析</title>
      <link>http://nituchao.com/post/juc.atomic/atomic-long-array/</link>
      <pubDate>Thu, 23 Feb 2017 18:30:27 +0800</pubDate>
      
      <guid>http://nituchao.com/post/juc.atomic/atomic-long-array/</guid>
      <description>

&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;

&lt;p&gt;在原子变量相关类中，AtomicIntegerArray, AtomicLongArray, AtomicReferenceArray三个类是对数组类型的原子类操作，其原理和用法类似，本文重点研究AtomicLongArray。&lt;/p&gt;

&lt;p&gt;Java原子变量的实现依赖于&lt;code&gt;sun.misc.Unsafe&lt;/code&gt;的CAS操作和volatile的内存可见性语义。&lt;/p&gt;

&lt;p&gt;本文基于JDK1.7.0_67&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;java version &amp;ldquo;1.7.0&lt;em&gt;67&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;_Java&amp;trade; SE Runtime Environment (build 1.7.0_67-b01)&lt;/p&gt;

&lt;p&gt;Java HotSpot&amp;trade; 64-Bit Server VM (build 24.65-b04, mixed mode)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;成员变量&#34;&gt;成员变量&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 成员变量unsafe是原子变量相关操作的基础
// 原子变量的修改操作最终有sun.misc.Unsafe类的CAS操作实现
private static final Unsafe unsafe = Unsafe.getUnsafe();
// arrayBaseOffset获取数组首个元素地址偏移
private static final int base = unsafe.arrayBaseOffset(long[].class);
// shift就是数组元素的偏移量
private static final int shift;
// 保存数据的数组，在构造函数中初始化
private final long[] array;

static {
  	// scale数组元素的增量偏移 
    int scale = unsafe.arrayIndexScale(long[].class);
  	// 用二进制&amp;amp;操作判断是否是2的倍数，很精彩
    // 对于int型数组，scale是4
  	// 对于lang型数组，scale是8
    // 对于Reference型数组，scale是4
    if ((scale &amp;amp; (scale - 1)) != 0)
          throw new Error(&amp;quot;data type scale not a power of two&amp;quot;);
    // 这里是处理long型的偏移量
    // 对于int型的偏移量，shift是2
    // 对于lang型的偏移量，shift是3
  	// 对于Reference型的偏移量，shift是2
    shift = 31 - Integer.numberOfLeadingZeros(scale);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;函数列表&#34;&gt;函数列表&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 构造函数，初始化一个长度为length的空数组
public AtomicLongArray(int length)
// 构造函数，通过拷贝给定数组的值进行初始化
// 通过构造函数中final域的内存语义，保证数据可见性
public AtomicLongArray(long[] array)
// 检查索引值是否越界，并计算数组中元素的地址
private long checkedByteOffset(int i)
// 计算数组中元素的地址，首地址偏移+每个元素的偏移
// 采用了移位操作
private static long byteOffset(int i)
// 返回数组长度
public final int length()
// 以原子方式获取数组元素
public final long get(int i)
// 以原子方式获取数组元素，私有函数
private long getRaw(long offset)
// 以原子方式设置数组指定位置为新的值newValue
public final void set(int i, long newValue)
// 以原子方式设置数组指定位置为新的值newValue
// 该函数优先保证对数据的更新，而不保证数据可见性
// 该函数的性能比set函数好很多
public final void lazySet(int i, long newValue)
// 以原子方式设置数组指定位置为新的值newValue
// 该过程会以自旋的形式循环执行，直到操作成功
// 该过程不会阻塞
// 返回更新前的值
public final long getAndSet(int i, long newValue)
// 以原子方式设置数组指定位置为新的值update
// 如果当前值等于expect，并设置成功，返回true
// 如果当前值不等于expect，则设置失败，返回false
// 该过程不阻塞
public final boolean compareAndSet(int i, long expect, long update)
// 以原子方式设置数组指定位置为新的值update
// 如果当前值等于expect，并设置成功，返回true
// 如果当前值不等于expect，则设置失败，返回false
// 该过程不阻塞
// 私有函数
private boolean compareAndSetRaw(long offset, long expect, long update)
// 以原子方式设置数组指定位置为新的值update
// 如果当前值等于expect，并设置成功，返回true
// 如果当前值不等于expect，则设置失败，返回false
// 该过程不阻塞
// 该过程不保证volatile成员的happens-before语义顺序
public final boolean weakCompareAndSet(int i, long expect, long update)
// 以原子方式设置数组指定位置为当前值加1
// 该过程不阻塞
// 返回更新前的值
public final long getAndIncrement(int i)
// 以原子方式设置数组指定位置为当前值减1
// 该过程不阻塞
// 返回更新前的值
public final long getAndDecrement(int i)
// 以原子方式设置数组指定位置为当前值+delta
// 该过程不阻塞
// 返回更新前的值
public final long getAndAdd(int i, long delta)
// 以原子方式设置数组指定位置为当前值加1
// 该过程不阻塞
// 返回更新前的值
public final long incrementAndGet(int i)
// 以原子方式设置数组指定位置为当前值减1
// 该过程不阻塞
// 返回更新前的值
public final long decrementAndGet(int i)
// 以原子方式设置数组指定位置为当前值+delta
// 该过程不阻塞
// 返回更新后的值
public long addAndGet(int i, long delta)
// 遍历数组中的每一个值，构造字符串
// 返回构造的字符串
public String toString()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;重要函数分析&#34;&gt;重要函数分析&lt;/h2&gt;

&lt;h3 id=&#34;checkedbyoffset-int-i&#34;&gt;checkedByOffset(int i)&lt;/h3&gt;

&lt;p&gt;首先判断索引值&lt;code&gt;i&lt;/code&gt;是否越界，如果越界，则抛出越界异常。否则，调用byteOffset(int i)函数计算该索引值&lt;code&gt;i&lt;/code&gt;对应在数组中的内存偏移值，该偏移值被&lt;code&gt;sun.misc.Unsafe&lt;/code&gt;类的函数使用。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private long checkedByteOffset(int i) {
    if (i &amp;lt; 0 || i &amp;gt;= array.length)
        throw new IndexOutOfBoundsException(&amp;quot;index &amp;quot; + i);

    return byteOffset(i);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;byteoffset-int-i&#34;&gt;byteOffset(int i)&lt;/h3&gt;

&lt;p&gt;根据索引值&lt;code&gt;i&lt;/code&gt;，计算数组中元素的地址，首地址偏移+每个元素的偏移&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private static long byteOffset(int i) {
    return ((long) i &amp;lt;&amp;lt; shift) + base;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lazyset-int-i-long-newvalue&#34;&gt;lazySet(int i, long newValue)&lt;/h3&gt;

&lt;p&gt;简单点说，lazySet优先保证数据的修改操作，而降低对可见性的要求。&lt;/p&gt;

&lt;p&gt;lazySet是使用Unsafe.putOrderedLong方法，这个方法在对低延迟代码是很有用的，它能够实现非堵塞的写入，这些写入不会被Java的JIT重新排序指令(&lt;a href=&#34;http://stackoverflow.com/questions/14321212/java-instruction-reordering-cache-in-threads&#34;&gt;instruction reordering&lt;/a&gt;)，这样它使用快速的存储-存储(store-store) barrier, 而不是较慢的存储-加载(store-load) barrier, 后者总是用在volatile的写操作上，这种性能提升是有代价的，虽然便宜，也就是写后结果并不会被其他线程看到，甚至是自己的线程，通常是几纳秒后被其他线程看到，这个时间比较短，所以代价可以忍受。&lt;/p&gt;

&lt;p&gt;类似Unsafe.putOrderedLong还有unsafe.putOrderedObject等方法，unsafe.putOrderedLong比使用 volatile long要快3倍左右。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public final void lazySet(int i, long newValue) {
    unsafe.putOrderedLong(array, checkedByteOffset(i), newValue);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;getandset-int-i-long-newvalue&#34;&gt;getAndSet(int i, long newValue)&lt;/h3&gt;

&lt;p&gt;以原子方式设置数组指定位置为新的值newValue，该过程会以自旋的形式循环执行，直到操作成功。该过程不会阻塞。因为该函数包含两个操作(get和set)，因此需要使用自旋方式通过&lt;code&gt;sun.misc.Unsafe&lt;/code&gt;的CAS操作保证原子性。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public final long getAndSet(int i, long newValue) {
    long offset = checkedByteOffset(i);
    while (true) {
        long current = getRaw(offset);
        if (compareAndSetRaw(offset, current, newValue))
            return current;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;tostring&#34;&gt;toString()&lt;/h3&gt;

&lt;p&gt;通过遍历数组中元素来构造字符串，并返回。该函数是线程不安全的，在操作过程中内容可能会发生变化，使得AtomicLongArray具有若一致性。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public String toString() {
    int iMax = array.length - 1;
    if (iMax == -1)
        return &amp;quot;[]&amp;quot;;

    StringBuilder b = new StringBuilder();
    b.append(&#39;[&#39;);
    for (int i = 0; ; i++) {
        b.append(getRaw(byteOffset(i)));
        if (i == iMax)
            return b.append(&#39;]&#39;).toString();
        b.append(&#39;,&#39;).append(&#39; &#39;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>AtomicReference源码分析</title>
      <link>http://nituchao.com/post/juc.atomic/atomic-reference/</link>
      <pubDate>Thu, 23 Feb 2017 18:30:27 +0800</pubDate>
      
      <guid>http://nituchao.com/post/juc.atomic/atomic-reference/</guid>
      <description>

&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;

&lt;p&gt;在原子变量相关类中，AtomicReference, AtomicStampedReference, AtomicMarkableReference三个类是对于引用类型的操作，其原理和用法类似。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;AtomicStampedReference&lt;/code&gt;是带了整型版本号(int stamp)的引用型原子变量，每次执行CAS操作时需要对比版本，如果版本满足要求，则操作成功，否则操作失败，用于防止CAS操作的ABA问题。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;AtomicMarkableReference&lt;/code&gt;则是带了布尔型标记位(Boolean mark)的引用型原子量，每次执行CAS操作是需要对比该标记位，如果标记满足要求，则操作成功，否则操作失败。&lt;/p&gt;

&lt;p&gt;Java原子变量的实现依赖于&lt;code&gt;sun.misc.Unsafe&lt;/code&gt;的CAS操作和volatile的内存可见性语义。&lt;/p&gt;

&lt;p&gt;本文基于JDK1.7.0_67&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;java version &amp;ldquo;1.7.0&lt;em&gt;67&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;_Java&amp;trade; SE Runtime Environment (build 1.7.0_67-b01)&lt;/p&gt;

&lt;p&gt;Java HotSpot&amp;trade; 64-Bit Server VM (build 24.65-b04, mixed mode)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;成员变量&#34;&gt;成员变量&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;AtomicReference&lt;/code&gt;通过泛型&lt;code&gt;T&lt;/code&gt;来声明成员值的类型，表示这是对引用类型的操作。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 成员变量unsafe是原子变量相关操作的基础
// 原子变量的修改操作最终有sun.misc.Unsafe类的CAS操作实现
private static final Unsafe unsafe = Unsafe.getUnsafe();
// 成员变量value的内存偏移值，在静态代码块中初始化
private static final long valueOffset;
// 通过volatile关键字保证可见性，用于保存值
private volatile V value;

static {
  try {
    valueOffset = unsafe.objectFieldOffset
      (AtomicReference.class.getDeclaredField(&amp;quot;value&amp;quot;));
  } catch (Exception ex) { throw new Error(ex); }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;函数列表&#34;&gt;函数列表&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 构造函数，初始化值为null
public AtomicReference()
// 构造函数，指定初始化值
public AtomicReference(V initialValue)
// 以原子方式获取当前值
public final V get()
// 以原子方式设置当前值为新的值newValue
public final void set(V newValue)
// 以原子方式设置当前值为新的值newValue
// 优先保证修改操作，而不保证volatile的可见性语义
// 效率较高
public final void lazySet(V newValue)
// 以原子方式设置当前值为update
// 如果当前值等于except，则设置成功，返回true
// 如果当前值不等于except，则设置失败，返回fase
// 该过程不阻塞
public final boolean compareAndSet(V expect, V update)
// 以原子方式设置当前值为update
// 如果当前值等于except，则设置成功，返回true
// 如果当前值不等于except，则设置失败，返回fase
// 该过程不阻塞
// 该过程不保证volatile成员的happens-before语义顺序
public final boolean weakCompareAndSet(V expect, V update)
// 以原子方式设置当前值为update
// 返回更新前的值
public final V getAndSet(V newValue)
// 返回当前值的string表达式
public String toString()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;重点函数分析&#34;&gt;重点函数分析&lt;/h2&gt;

&lt;h3 id=&#34;set-v-newvalue&#34;&gt;set(V newValue)&lt;/h3&gt;

&lt;p&gt;以原子方式设置当前值为newValue，因为set方法只是一个单操作的赋值语句，因此是原子的。加上volatile的内存可见性保证，Set是原子操作无疑。&lt;/p&gt;

&lt;h3 id=&#34;lazyset-v-newvalue&#34;&gt;lazySet(V newValue)&lt;/h3&gt;

&lt;p&gt;简单点说，lazySet优先保证数据的修改操作，而降低对可见性的要求。&lt;/p&gt;

&lt;p&gt;lazySet是使用Unsafe.putOrderedObject方法，这个方法在对低延迟代码是很有用的，它能够实现非堵塞的写入，这些写入不会被Java的JIT重新排序指令(&lt;a href=&#34;http://stackoverflow.com/questions/14321212/java-instruction-reordering-cache-in-threads&#34;&gt;instruction reordering&lt;/a&gt;)，这样它使用快速的存储-存储(store-store) barrier, 而不是较慢的存储-加载(store-load) barrier, 后者总是用在volatile的写操作上，这种性能提升是有代价的，虽然便宜，也就是写后结果并不会被其他线程看到，甚至是自己的线程，通常是几纳秒后被其他线程看到，这个时间比较短，所以代价可以忍受。&lt;/p&gt;

&lt;p&gt;类似Unsafe.putOrderedObject还有unsafe.putOrderedLong等方法，unsafe.putOrderedLong比使用 volatile long要快3倍左右。&lt;/p&gt;

&lt;h2 id=&#34;compareandset-v-expect-v-update&#34;&gt;compareAndSet(V expect,V update)&lt;/h2&gt;

&lt;p&gt;以原子方式设置当前值为update。如果当前值等于expect，并设置成功，返回true。如果当前值不等于expect，则设置失败，返回false。该过程不阻塞。由于是使用了&lt;code&gt;sun.misc.Unsafe&lt;/code&gt;的CAS操作实现，它是原子操作无疑。&lt;/p&gt;

&lt;p&gt;_&lt;em&gt;set和compareAndSet都是原子操作，只是他们的目的不同，set只是单纯想设置一个新的值。而compareAndSet则是希望在满足一定条件的情况下(当前值等于except)再设置新的值。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;weakcompareandset-v-expect-v-update&#34;&gt;weakCompareAndSet(V expect,V update)&lt;/h2&gt;

&lt;p&gt;以原子方式设置当前值为update。它的实现与compareAndSet完全一致。JDK文档中说，weakCompareAndSet在更新变量时并不创建任何&lt;code&gt;happens-before&lt;/code&gt;顺序，因此即使要修改的值是volatile的，也不保证对该变量的读写操作的顺序（一般来讲，volatile的内存语义保证&lt;code&gt;happens-before&lt;/code&gt;顺序）。&lt;/p&gt;

&lt;p&gt;参考:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.xamarin.com/api/type/Java.Util.Concurrent.Atomic.AtomicMarkableReference/&#34;&gt;Java.Util.Concurrent.Atomic.AtomicMarkableReference Class&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>AtomicStampedReference源码分析</title>
      <link>http://nituchao.com/post/juc.atomic/atomic-stamped-reference/</link>
      <pubDate>Thu, 23 Feb 2017 18:30:27 +0800</pubDate>
      
      <guid>http://nituchao.com/post/juc.atomic/atomic-stamped-reference/</guid>
      <description>

&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;

&lt;p&gt;在原子变量相关类中，AtomicReference, AtomicStampedReference, AtomicMarkableReference三个类是对于引用类型的操作，其原理和用法类似。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;AtomicStampedReference&lt;/code&gt;是带了整型版本号(int stamp)的引用型原子变量，每次执行CAS操作时需要对比版本，如果版本满足要求，则操作成功，否则操作失败，用于防止CAS操作的ABA问题。本文重点分析&lt;code&gt;AtomicStampedReference&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;AtomicMarkableReference&lt;/code&gt;则是带了布尔型标记位(Boolean mark)的引用型原子量，每次执行CAS操作是需要对比该标记位，如果标记满足要求，则操作成功，否则操作失败。&lt;/p&gt;

&lt;p&gt;Java原子变量的实现依赖于&lt;code&gt;sun.misc.Unsafe&lt;/code&gt;的CAS操作和volatile的内存可见性语义。&lt;/p&gt;

&lt;p&gt;本文基于JDK1.7.0_67&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;java version &amp;ldquo;1.7.0&lt;em&gt;67&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;_Java&amp;trade; SE Runtime Environment (build 1.7.0_67-b01)&lt;/p&gt;

&lt;p&gt;Java HotSpot&amp;trade; 64-Bit Server VM (build 24.65-b04, mixed mode)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;内部类&#34;&gt;内部类&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;AtomicStampedReference&lt;/code&gt;是带整形版本号的原子引用类型，为了同时兼顾引用值和版本号，它定义了一个静态内部类&lt;code&gt;Pair&lt;/code&gt;，&lt;code&gt;AtomicStampedReference&lt;/code&gt;的相关操作都是对&lt;code&gt;Pair&lt;/code&gt;内成员的操作。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private static class Pair&amp;lt;T&amp;gt; {
    final T reference;
    final int stamp;
    private Pair(T reference, int stamp) {
        this.reference = reference;
        this.stamp = stamp;
    }
    static &amp;lt;T&amp;gt; Pair&amp;lt;T&amp;gt; of(T reference, int stamp) {
      	return new Pair&amp;lt;T&amp;gt;(reference, stamp);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;成员变量&#34;&gt;成员变量&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;AtomicStampedReference&lt;/code&gt;除了常规的&lt;code&gt;sun.misc.Unsafe&lt;/code&gt;实例和&lt;code&gt;pairOffset&lt;/code&gt;内存偏移量外，声明了一个&lt;code&gt;volatile&lt;/code&gt;的&lt;code&gt;Pair&amp;lt;T&amp;gt;&lt;/code&gt;成员，用于同时维护引用值和版本号。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 成员变量unsafe是原子变量相关操作的基础
// 原子变量的修改操作最终有sun.misc.Unsafe类的CAS操作实现
private static final sun.misc.Unsafe UNSAFE = Unsafe.getUnsafe();
// 成员变量value的内存偏移值
private static final long pairOffset = objectFieldOffset(UNSAFE, &amp;quot;pair&amp;quot;, AtomicStampedReference.class);
// 用volatile的内存语义保证可见性
// 保存引用值和版本号
private volatile Pair&amp;lt;V&amp;gt; pair;

// 获取指定域的内存偏移量
static long objectFieldOffset(sun.misc.Unsafe UNSAFE,
                              String field, Class&amp;lt;?&amp;gt; klazz) {
    try {
        return UNSAFE.objectFieldOffset(klazz.getDeclaredField(field));
    } catch (NoSuchFieldException e) {
        // Convert Exception to corresponding Error
        NoSuchFieldError error = new NoSuchFieldError(field);
        error.initCause(e);
        throw error;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;函数列表&#34;&gt;函数列表&lt;/h2&gt;

&lt;p&gt;由于&lt;code&gt;AtomicStampedReference&lt;/code&gt;要同时维护引用值和版本号，因此很多操作变得复杂。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 构造函数，初始化引用和版本号
public AtomicStampedReference(V initialRef, int initialStamp)
// 以原子方式获取当前引用值
public V getReference()
// 以原子方式获取当前版本号
public int getStamp()
// 以原子方式获取当前引用值和版本号
public V get(int[] stampHolder)
// 以原子的方式同时更新引用值和版本号
// 当期望引用值不等于当前引用值时，操作失败，返回false
// 当期望版本号不等于当前版本号时，操作失败，返回false
// 在期望引用值和期望版本号同时等于当前值的前提下
// 当新的引用值和新的版本号同时等于当前值时，不更新，直接返回true
// 当新的引用值和新的版本号不同时等于当前值时，同时设置新的引用值和新的版本号，返回true
// 该过程不保证volatile成员的happens-before语义顺序
public boolean weakCompareAndSet(V  expectedReference,
                                 V  newReference,
                                 int expectedStamp,
                                 int newStamp)
// 以原子的方式同时更新引用值和版本号
// 当期望引用值不等于当前引用值时，操作失败，返回false
// 当期望版本号不等于当前版本号时，操作失败，返回false
// 在期望引用值和期望版本号同时等于当前值的前提下
// 当新的引用值和新的版本号同时等于当前值时，不更新，直接返回true
// 当新的引用值和新的版本号不同时等于当前值时，同时设置新的引用值和新的版本号，返回true
public boolean compareAndSet(V   expectedReference,
                             V   newReference,
                             int expectedStamp,
                             int newStamp)
// 以原子方式设置引用的当前值为新值newReference
// 同时，以原子方式设置版本号的当前值为新值newStamp
// 新引用值和新版本号只要有一个跟当前值不一样，就进行更新
public void set(V newReference, int newStamp)
// 以原子方式设置版本号为新的值
// 前提：引用值保持不变
// 当期望的引用值与当前引用值不相同时，操作失败，返回fasle
// 当期望的引用值与当前引用值相同时，操作成功，返回true
public boolean attemptStamp(V expectedReference, int newStamp)
// 使用`sun.misc.Unsafe`类原子地交换两个对象
private boolean casPair(Pair&amp;lt;V&amp;gt; cmp, Pair&amp;lt;V&amp;gt; val)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;重点函数分析&#34;&gt;重点函数分析&lt;/h2&gt;

&lt;h3 id=&#34;atomicstampedreference&#34;&gt;AtomicStampedReference&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public AtomicStampedReference(V initialRef, int initialStamp) {
  	pair = Pair.of(initialRef, initialStamp);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;构造函数，根据指定的引用值和版本号，构造一个Pair对象，并将该对象赋值给成员变量&lt;code&gt;pair&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;由于成员变量&lt;code&gt;pair&lt;/code&gt;被volatile修饰，并且这里只有一个单操作的赋值语句，因此是可以保证原子性的。&lt;/p&gt;

&lt;h3 id=&#34;get&#34;&gt;get&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public V get(int[] stampHolder) {
    Pair&amp;lt;V&amp;gt; pair = this.pair;
    stampHolder[0] = pair.stamp;
    return pair.reference;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;真个函数很有意思，同时获取引用值和版本号。由于Java程序只能有一个返回值，该函数通过一个数组参数&lt;code&gt;int[] stampHolder&lt;/code&gt;来返回版本号，而通过&lt;code&gt;return&lt;/code&gt;语句返回引用值。&lt;/p&gt;

&lt;h3 id=&#34;set&#34;&gt;set&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void set(V newReference, int newStamp) {
	Pair&amp;lt;V&amp;gt; current = pair;
	if (newReference != current.reference || newStamp != current.stamp)
		this.pair = Pair.of(newReference, newStamp);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;只要新的引用值和新的版本号，有一个与当前值不一样的，就同时修改引用值和版本号。&lt;/p&gt;

&lt;h3 id=&#34;compareandset&#34;&gt;compareAndSet&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public boolean compareAndSet(V   expectedReference,
                             V   newReference,
                             int expectedStamp,
                             int newStamp) {
 	Pair&amp;lt;V&amp;gt; current = pair;
 	return
 		expectedReference == current.reference &amp;amp;&amp;amp;
 		expectedStamp == current.stamp &amp;amp;&amp;amp;
 		((newReference == current.reference &amp;amp;&amp;amp;
 		  newStamp == current.stamp) ||
 		  casPair(current, Pair.of(newReference, newStamp)));
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以原子的方式同时更新引用值和版本号。&lt;/p&gt;

&lt;p&gt;当期望引用值不等于当前引用值时，操作失败，返回false。&lt;/p&gt;

&lt;p&gt;当期望版本号不等于当前版本号时，操作失败，返回false。&lt;/p&gt;

&lt;p&gt;在期望引用值和期望版本号同时等于当前值的前提下，当新的引用值和新的版本号同时等于当前值时，不更新，直接返回true。由于要修改的内容与原内容完全一致，这种处理可以避免一次内存操作，效率较高。&lt;/p&gt;

&lt;p&gt;当新的引用值和新的版本号不同时等于当前值时，同时设置新的引用值和新的版本号，返回true&lt;/p&gt;

&lt;h3 id=&#34;weakcompareandset&#34;&gt;weakCompareAndSet&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public boolean weakCompareAndSet(V   expectedReference,
                                 V   newReference,
                                 int expectedStamp,
                                 int newStamp) {
  	return compareAndSet(expectedReference, newReference,
                       	 expectedStamp, newStamp);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以原子的方式同时更新引用值和版本号。该是通过调用CompareAndSet实现的。JDK文档中说，weakCompareAndSet在更新变量时并不创建任何&lt;code&gt;happens-before&lt;/code&gt;顺序，因此即使要修改的值是volatile的，也不保证对该变量的读写操作的顺序（一般来讲，volatile的内存语义保证&lt;code&gt;happens-before&lt;/code&gt;顺序）。&lt;/p&gt;

&lt;h3 id=&#34;attemptstamp&#34;&gt;attemptStamp&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public boolean attemptStamp(V expectedReference, int newStamp) {
  	Pair&amp;lt;V&amp;gt; current = pair;
  	return
    	expectedReference == current.reference &amp;amp;&amp;amp;
    	(newStamp == current.stamp ||
     	 casPair(current, Pair.of(expectedReference, newStamp)));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改指定引用值的版本号。&lt;/p&gt;

&lt;p&gt;当期望的引用值与当前引用值不相同时，操作失败，返回fasle。
当期望的引用值与当前引用值相同时，操作成功，返回true。&lt;/p&gt;

&lt;h3 id=&#34;caspair&#34;&gt;casPair&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private boolean casPair(Pair&amp;lt;V&amp;gt; cmp, Pair&amp;lt;V&amp;gt; val) {
  	return UNSAFE.compareAndSwapObject(this, pairOffset, cmp, val);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用&lt;code&gt;sun.misc.Unsafe&lt;/code&gt;类原子地交换两个对象。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AtomicMarkableReference源码分析</title>
      <link>http://nituchao.com/post/juc.atomic/atomic-markable-reference/</link>
      <pubDate>Thu, 23 Feb 2017 18:30:25 +0800</pubDate>
      
      <guid>http://nituchao.com/post/juc.atomic/atomic-markable-reference/</guid>
      <description>

&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;

&lt;p&gt;在原子变量相关类中，AtomicReference, AtomicStampedReference, AtomicMarkableReference三个类是对于引用类型的操作，其原理和用法类似。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;AtomicStampedReference&lt;/code&gt;是带了整型标记值(int stamp)的引用型原子变量，每次执行CAS操作时需要对比版本，如果版本满足要求，则操作成功，否则操作失败，用于防止CAS操作的ABA问题。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;AtomicMarkableReference&lt;/code&gt;则是带了布尔型标记位(Boolean mark)的引用型原子量，每次执行CAS操作是需要对比该标记位，如果标记满足要求，则操作成功，否则操作失败。本文重点分析&lt;code&gt;AtomicMarkableReference&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;Java原子变量的实现依赖于&lt;code&gt;sun.misc.Unsafe&lt;/code&gt;的CAS操作和volatile的内存可见性语义。&lt;/p&gt;

&lt;p&gt;本文基于JDK1.7.0_67&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;java version &amp;ldquo;1.7.0_&lt;em&gt;67&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;_Java&amp;trade; SE Runtime Environment (build 1.7.0_67-b01)&lt;/p&gt;

&lt;p&gt;Java HotSpot&amp;trade; 64-Bit Server VM (build 24.65-b04, mixed mode)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;内部类&#34;&gt;内部类&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;AtomicMarkableReference&lt;/code&gt;是带布尔型标记为的原子引用类型，为了同时兼顾引用值和标记位，它定义了一个静态内部类&lt;code&gt;Pair&lt;/code&gt;，&lt;code&gt;AtomicMarkableReference&lt;/code&gt;的相关操作都是对&lt;code&gt;Pair&lt;/code&gt;内成员的操作。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private static class Pair&amp;lt;T&amp;gt; {
    final T reference;
    final boolean mark;
    private Pair(T reference, boolean mark) {
        this.reference = reference;
        this.mark = mark;
    }
    static &amp;lt;T&amp;gt; Pair&amp;lt;T&amp;gt; of(T reference, int mark) {
      	return new Pair&amp;lt;T&amp;gt;(reference, mark);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;成员变量&#34;&gt;成员变量&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;AtomicMarkableReference&lt;/code&gt;除了常规的&lt;code&gt;sun.misc.Unsafe&lt;/code&gt;实例和&lt;code&gt;pairOffset&lt;/code&gt;内存偏移量外，声明了一个&lt;code&gt;volatile&lt;/code&gt;的&lt;code&gt;Pair&amp;lt;T&amp;gt;&lt;/code&gt;成员，用于同时维护引用值和标记值。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 成员变量unsafe是原子变量相关操作的基础
// 原子变量的修改操作最终有sun.misc.Unsafe类的CAS操作实现
private static final sun.misc.Unsafe UNSAFE = Unsafe.getUnsafe();
// 成员变量value的内存偏移值
private static final long pairOffset = objectFieldOffset(UNSAFE, &amp;quot;pair&amp;quot;, AtomicMarkableReference.class);
// 用volatile的内存语义保证可见性
// 保存引用值和标记值
private volatile Pair&amp;lt;V&amp;gt; pair;

// 获取指定域的内存偏移量
static long objectFieldOffset(sun.misc.Unsafe UNSAFE,
                              String field, Class&amp;lt;?&amp;gt; klazz) {
    try {
        return UNSAFE.objectFieldOffset(klazz.getDeclaredField(field));
    } catch (NoSuchFieldException e) {
        // Convert Exception to corresponding Error
        NoSuchFieldError error = new NoSuchFieldError(field);
        error.initCause(e);
        throw error;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;函数列表&#34;&gt;函数列表&lt;/h2&gt;

&lt;p&gt;由于&lt;code&gt;AtomicMarkableReference&lt;/code&gt;要同时维护引用值和标记值，因此很多操作变得复杂。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 构造函数，初始化引用和标记值
public AtomicMarkableReference(V initialRef, boolean initialMark)
// 以原子方式获取当前引用值
public V getReference()
// 以原子方式获取当前标记值
public int isMarked()
// 以原子方式获取当前引用值和标记值
public V get(boolean[] markHolder)
// 以原子的方式同时更新引用值和标记值
// 当期望引用值不等于当前引用值时，操作失败，返回false
// 当期望标记值不等于当前标记值时，操作失败，返回false
// 在期望引用值和期望标记值同时等于当前值的前提下
// 当新的引用值和新的标记值同时等于当前值时，不更新，直接返回true
// 当新的引用值和新的标记值不同时等于当前值时，同时设置新的引用值和新的标记值，返回true
// 该过程不保证volatile成员的happens-before语义顺序
public boolean weakCompareAndSet(V  expectedReference,
                                 V  newReference,
                                 int expectedMark,
                                 int newMark)
// 以原子的方式同时更新引用值和标记值
// 当期望引用值不等于当前引用值时，操作失败，返回false
// 当期望标记值不等于当前标记值时，操作失败，返回false
// 在期望引用值和期望标记值同时等于当前值的前提下
// 当新的引用值和新的标记值同时等于当前值时，不更新，直接返回true
// 当新的引用值和新的标记值不同时等于当前值时，同时设置新的引用值和新的标记值，返回true
public boolean compareAndSet(V   expectedReference,
                             V   newReference,
                             int expectedMark,
                             int newMark)
// 以原子方式设置引用的当前值为新值newReference
// 同时，以原子方式设置标记值的当前值为新值newMark
// 新引用值和新标记值只要有一个跟当前值不一样，就进行更新
public void set(V newReference, int newMark)
// 以原子方式设置标记值为新的值
// 前提：引用值保持不变
// 当期望的引用值与当前引用值不相同时，操作失败，返回fasle
// 当期望的引用值与当前引用值相同时，操作成功，返回true
public boolean attemptMark(V expectedReference, int newMark)
// 使用`sun.misc.Unsafe`类原子地交换两个对象
private boolean casPair(Pair&amp;lt;V&amp;gt; cmp, Pair&amp;lt;V&amp;gt; val)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;重点函数分析&#34;&gt;重点函数分析&lt;/h2&gt;

&lt;h3 id=&#34;atomicmarkablereference&#34;&gt;AtomicMarkableReference&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public AtomicMarkableReference(V initialRef, int initialMark) {
  	pair = Pair.of(initialRef, initialMark);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;构造函数，根据指定的引用值和标记值，构造一个Pair对象，并将该对象赋值给成员变量&lt;code&gt;pair&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;由于成员变量&lt;code&gt;pair&lt;/code&gt;被volatile修饰，并且这里只有一个单操作的赋值语句，因此是可以保证原子性的。&lt;/p&gt;

&lt;h3 id=&#34;get&#34;&gt;get&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public V get(int[] markHolder) {
    Pair&amp;lt;V&amp;gt; pair = this.pair;
    markHolder[0] = pair.markz;
    return pair.reference;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;真个函数很有意思，同时获取引用值和标记值。由于Java程序只能有一个返回值，该函数通过一个数组参数&lt;code&gt;int[] markHolder&lt;/code&gt;来返回标记值，而通过&lt;code&gt;return&lt;/code&gt;语句返回引用值。&lt;/p&gt;

&lt;h3 id=&#34;set&#34;&gt;set&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void set(V newReference, int newMark) {
	Pair&amp;lt;V&amp;gt; current = pair;
	if (newReference != current.reference || newMark != current.mark)
		this.pair = Pair.of(newReference, newMark);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;只要新的引用值和新的标记值，有一个与当前值不一样的，就同时修改引用值和标记值。&lt;/p&gt;

&lt;h3 id=&#34;compareandset&#34;&gt;compareAndSet&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public boolean compareAndSet(V   expectedReference,
                             V   newReference,
                             int expectedMark,
                             int newMark) {
 	Pair&amp;lt;V&amp;gt; current = pair;
 	return
 		expectedReference == current.reference &amp;amp;&amp;amp;
 		expectedMark == current.mark &amp;amp;&amp;amp;
 		((newReference == current.reference &amp;amp;&amp;amp;
 		  newMark == current.mark) ||
 		  casPair(current, Pair.of(newReference, newMark)));
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以原子的方式同时更新引用值和标记值。&lt;/p&gt;

&lt;p&gt;当期望引用值不等于当前引用值时，操作失败，返回false。&lt;/p&gt;

&lt;p&gt;当期望标记值不等于当前标记值时，操作失败，返回false。&lt;/p&gt;

&lt;p&gt;在期望引用值和期望标记值同时等于当前值的前提下，当新的引用值和新的标记值同时等于当前值时，不更新，直接返回true。由于要修改的内容与原内容完全一致，这种处理可以避免一次内存操作，效率较高。&lt;/p&gt;

&lt;p&gt;当新的引用值和新的标记值不同时等于当前值时，同时设置新的引用值和新的标记值，返回true&lt;/p&gt;

&lt;h3 id=&#34;weakcompareandset&#34;&gt;weakCompareAndSet&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public boolean weakCompareAndSet(V   expectedReference,
                                 V   newReference,
                                 int expectedMark,
                                 int newMark) {
  	return compareAndSet(expectedReference, newReference,
                       	 expectedMark, newMark);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以原子的方式同时更新引用值和标记值。该是通过调用CompareAndSet实现的。JDK文档中说，weakCompareAndSet在更新变量时并不创建任何&lt;code&gt;happens-before&lt;/code&gt;顺序，因此即使要修改的值是volatile的，也不保证对该变量的读写操作的顺序（一般来讲，volatile的内存语义保证&lt;code&gt;happens-before&lt;/code&gt;顺序）。&lt;/p&gt;

&lt;h3 id=&#34;attemptmark&#34;&gt;attemptMark&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public boolean attemptMark(V expectedReference, int newMark) {
  	Pair&amp;lt;V&amp;gt; current = pair;
  	return
    	expectedReference == current.reference &amp;amp;&amp;amp;
    	(newMark == current.mark ||
     	 casPair(current, Pair.of(expectedReference, newMark)));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改指定引用值的标记值。&lt;/p&gt;

&lt;p&gt;当期望的引用值与当前引用值不相同时，操作失败，返回fasle。
当期望的引用值与当前引用值相同时，操作成功，返回true。&lt;/p&gt;

&lt;h3 id=&#34;caspair&#34;&gt;casPair&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private boolean casPair(Pair&amp;lt;V&amp;gt; cmp, Pair&amp;lt;V&amp;gt; val) {
  	return UNSAFE.compareAndSwapObject(this, pairOffset, cmp, val);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用&lt;code&gt;sun.misc.Unsafe&lt;/code&gt;类原子地交换两个对象。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AtomicReferenceFieldUpdater源码分析</title>
      <link>http://nituchao.com/post/juc.atomic/atomic-reference-field-update/</link>
      <pubDate>Thu, 23 Feb 2017 18:28:27 +0800</pubDate>
      
      <guid>http://nituchao.com/post/juc.atomic/atomic-reference-field-update/</guid>
      <description></description>
    </item>
    
    <item>
      <title>AtomicLongFieldUpdater源码分析</title>
      <link>http://nituchao.com/post/juc.atomic/atomic-long-field-updater/</link>
      <pubDate>Thu, 23 Feb 2017 18:27:27 +0800</pubDate>
      
      <guid>http://nituchao.com/post/juc.atomic/atomic-long-field-updater/</guid>
      <description>

&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;

&lt;p&gt;在原子变量相关类中，AtomicIntegerFieldUpdater, AtomicLongFieldUpdater, AtomicReferenceFieldUpdater三个类是用于原子地修改对象的成员属性，它们的原理和用法类似，区别在于对Integer，Long，Reference类型的成员属性进行修改。本文重点研究AtomicLongFieldUpdater。&lt;/p&gt;

&lt;p&gt;AtomicLongFieldUpdater的设计非常有意思。AtomicLongFieldUpdater本身是一个抽象类，只有一个受保护的构造函数，它本身不能被实例化。&lt;/p&gt;

&lt;p&gt;AtomicLongFieldUpdater有两个私有的静态内部类&lt;code&gt;CASUpdater&lt;/code&gt;和&lt;code&gt;LockedUpdater&lt;/code&gt;，它们都是&lt;code&gt;AtomicLongFieldUpdater&lt;/code&gt;的子类。用户使用&lt;code&gt;AtomicLongFieldUpdater&lt;/code&gt;公共静态方法&lt;code&gt;newUpdater&lt;/code&gt;实例化&lt;code&gt;AtomicLongFieldUpdater&lt;/code&gt;的对象，本质是上是根据条件实例化了子类&lt;code&gt;CASUpdater&lt;/code&gt;或者&lt;code&gt;LockedUpdater&lt;/code&gt;，然后通过子类来完成具体的工作。&lt;/p&gt;

&lt;p&gt;本文基于JDK1.7.0_67&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;java version &amp;ldquo;1.7.0_67&amp;rdquo;&lt;/p&gt;

&lt;p&gt;_Java™ SE Runtime Environment (build 1.7.0_67-b01)&lt;/p&gt;

&lt;p&gt;Java HotSpot™ 64-Bit Server VM (build 24.65-b04, mixed mode)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;内部类&#34;&gt;内部类&lt;/h3&gt;
</description>
    </item>
    
  </channel>
</rss>