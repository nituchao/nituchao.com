<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mysql on 泥土巢</title>
    <link>http://nituchao.com/categories/mysql/index.xml</link>
    <description>Recent content in Mysql on 泥土巢</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2017, nituchao | All rights reserved.</copyright>
    <atom:link href="http://nituchao.com/categories/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>MySQL提供的事务控制语句</title>
      <link>http://nituchao.com/post/2017/mysql-shi-wu-kong-zhi-yu-ju/</link>
      <pubDate>Tue, 14 Feb 2017 14:09:01 +0800</pubDate>
      
      <guid>http://nituchao.com/post/2017/mysql-shi-wu-kong-zhi-yu-ju/</guid>
      <description>

&lt;p&gt;在MySQL命令行的默认设置下，事务都是自动提交的，即执行SQL语句后就会马上执行&lt;code&gt;COMMIT&lt;/code&gt;操作。因此要显式地开启一个事务需要使用命令&lt;code&gt;BEGIN&lt;/code&gt;, &lt;code&gt;START TRANSACTION&lt;/code&gt;, 或者执行命令&lt;code&gt;SET AUTOCOMMIT=0&lt;/code&gt;, 禁用当前会话的自动提交。&lt;/p&gt;

&lt;p&gt;每个数据库厂商自动提交的设置都会不相同，每个DBA或开发人员需要非常明白这一点，这对之后的SQL编程会有非凡的意义，因此用户不能以之前的经验来判断MySQL数据库的运行方式。&lt;/p&gt;

&lt;p&gt;MySQL为开发者提供了三种类型的事务，分别是扁平化事务，带保存点的事务，链式事务。通过带保存点的事务还可以模拟实现嵌套事务。&lt;/p&gt;

&lt;h3 id=&#34;start-transaction-begin&#34;&gt;START TRANSACTION | BEGIN&lt;/h3&gt;

&lt;p&gt;显式地开启一个事务。&lt;/p&gt;

&lt;h3 id=&#34;commit&#34;&gt;COMMIT&lt;/h3&gt;

&lt;p&gt;要想使用这个语句的最简形式，只需要发出&lt;code&gt;COMMIT&lt;/code&gt;。也可以更详细一点，写为&lt;code&gt;COMMIT WORK&lt;/code&gt;, 不过这两者几乎是等价的。&lt;code&gt;COMMIT&lt;/code&gt;会提交事务，并使得已对数据库做的修改称为永久性的。&lt;/p&gt;

&lt;h3 id=&#34;rollback&#34;&gt;ROLLBACK&lt;/h3&gt;

&lt;p&gt;要想使用这个语句的最简形式，只需要发出&lt;code&gt;ROLLBACK&lt;/code&gt;。同样地，也可以写为&lt;code&gt;ROLLBACK WORK&lt;/code&gt;，但两者几乎是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改。&lt;/p&gt;

&lt;h3 id=&#34;savepoint-identity&#34;&gt;SAVEPOINT identity&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;SAVEPOINT&lt;/code&gt;允许在事务中创建一个保存点，一个事务中可以有多个&lt;code&gt;SAVEPOINT&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;release-savepoint-identity&#34;&gt;RELEASE SAVEPOINT identity&lt;/h3&gt;

&lt;p&gt;删除一个事务的保存点，当没有一个保存点执行这语句时，会抛出一个异常。&lt;/p&gt;

&lt;h3 id=&#34;rollback-to-savepoint-identity&#34;&gt;ROLLBACK TO [SAVEPOINT] identity&lt;/h3&gt;

&lt;p&gt;这个语句与&lt;code&gt;SAVEPOINT&lt;/code&gt;命令一起使用。可以把事务回滚到标记点，而不回滚在此标记点之前的任何工作。&lt;/p&gt;

&lt;p&gt;例如，可以发出两调&lt;code&gt;UPDATE&lt;/code&gt;语句，后面跟一个&lt;code&gt;SAVEPOINT&lt;/code&gt;, 然后又是两条&lt;code&gt;DELETE&lt;/code&gt;语句。如果执行&lt;code&gt;DELETE&lt;/code&gt;语句期间出现了某种异常情况，并且捕获到这个异常，同时发出了&lt;code&gt;ROLLBACK TO SAVEPOINT&lt;/code&gt;命令，事务就会回滚到指定的SAVEPOINT，撤销&lt;code&gt;DELETE&lt;/code&gt;完成的所有工作，而&lt;code&gt;UPDATE&lt;/code&gt;语句完成的工作不受影响。&lt;/p&gt;

&lt;h3 id=&#34;set-transaction&#34;&gt;SET TRANSACTION&lt;/h3&gt;

&lt;p&gt;这个语句用来设置事务的隔离级别。&lt;/p&gt;

&lt;p&gt;InnoDB存储引擎提供的事务隔离级别有：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;READ UNCOMMITED&lt;/li&gt;
&lt;li&gt;READ COMMITTED&lt;/li&gt;
&lt;li&gt;REPEATABLE READ&lt;/li&gt;
&lt;li&gt;SERIALIZABLE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;START TRANSACTION&lt;/code&gt;, &lt;code&gt;BEGIN&lt;/code&gt;语句都可以在MySQL命令行下显示地开启一个事务。但是在存储过程中，MySQL数据库的分析器会自动将BEGIN识别为BEGIN&amp;hellip;END, 因此在存储过程中只能使用&lt;code&gt;START TRANSACTION&lt;/code&gt;语句来开启一个事务。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;COMMIT&lt;/code&gt;和&lt;code&gt;COMMIT WORK&lt;/code&gt;语句基本是一致的，都是用来提交事务。不同之处在于&lt;code&gt;COMMIT WORK&lt;/code&gt;用来控制事务结束后的行为是&lt;code&gt;CHAIN&lt;/code&gt;还是&lt;code&gt;RELEASE&lt;/code&gt;的。如果是&lt;code&gt;CHAIN&lt;/code&gt;方式，那么事务就变成了链事务。&lt;/p&gt;

&lt;p&gt;用户可以通过参数&lt;code&gt;completion_type&lt;/code&gt;来进行控制，该参数默认为0，表示没有任何操作。&lt;/p&gt;

&lt;p&gt;当参数&lt;code&gt;completion_type&lt;/code&gt;的值为1时，&lt;code&gt;COMMIT WORK&lt;/code&gt;等同于&lt;code&gt;COMMIT AND CHAIN&lt;/code&gt;, 表示马上自动开启一个相同隔离级别的事务。&lt;/p&gt;

&lt;p&gt;当参数&lt;code&gt;completion_type&lt;/code&gt;的值为2时，&lt;code&gt;COMMIT WORK&lt;/code&gt;等同于&lt;code&gt;COMMIT AND RELEASE&lt;/code&gt;, 在事务提交后会自动断开与服务器的连接。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MySQL数据类型之实数</title>
      <link>http://nituchao.com/post/2014/mysql-shu-ju-lei-xing-zhi-shi-shu/</link>
      <pubDate>Fri, 12 Sep 2014 10:30:00 +0800</pubDate>
      
      <guid>http://nituchao.com/post/2014/mysql-shu-ju-lei-xing-zhi-shi-shu/</guid>
      <description>&lt;p&gt;Mysql使用浮点数类型和定点数类型来表示小数。浮点数类型包括单精度浮点数(FLOAT类型)和双精度浮点数(DOUBLE类型)。定点数类型就是DECIMAL型。&lt;/p&gt;

&lt;p&gt;实数有分数部分。然而，它们并不仅仅是分数。可以使用DECIMAL保存比BIGINT还大的整数。MySQL同时支持精确与非精确类型。&lt;/p&gt;

&lt;p&gt;FLOAT和DOUBLE类型支持使用标准的浮点运算进行近似计算。如果想知道浮点运算到底如何进行，则要研究平台浮点数的具体实现。&lt;/p&gt;

&lt;p&gt;DECIMAL类型用于保存精确的小数。在MySQL5.0及以上版本，DECIMAL类型支持精确的数学运算。MySQL4.1和早期版本对DECIMAL值执行浮点运算，它会因为丢失精度而导致奇怪的结果。在这些MySQL版本中，DECIMAL仅仅是“存储类型”。&lt;/p&gt;

&lt;p&gt;在MySQL5.0及以上版本中，服务器进行了DECIMAL运算，因为CPU并不支持对它进行直接计算。浮点运算会快一点，因为计算直接在CUP上进行。&lt;/p&gt;

&lt;p&gt;可以定义浮点类型和DECIMAL类型的精度。对于DECIMAL列，可以定义小数点之前和之后的最大位数，这影响了所需的存储空间。MySQL5.0和以上版本把数字保存到了一个二进制字符串中(每个4字节保存9个数字)。例如，DECIMAL(18,9)将会在小数点前后都保存9位数字，总共使用9个字节: 小数点前4个字节，小数点占一个字节，小数点后4个字节。&lt;/p&gt;

&lt;p&gt;MySQL5.0及以上版本中的DECIMAL类型最多允许65个数字。在较早的版本中，DECIMAL最多可以有254个数字，并且保存为未压缩的字符串(一个数字占一个字节)。然而，这些版本的MySQL根本不能在计算中使用如此大的数字，因为DECIMAL只是一种存储格式。DECIMAL在计算时会被转换为DOUBLE类型。&lt;/p&gt;

&lt;p&gt;可以用多重方式定义浮点数列的精度，它会导致MySQL悄悄采用不同的数据类型，或者在保存的时候进行圆整。这些精度定义符不是标准的，因此我们建议定义需要的类型，而不是精度。&lt;/p&gt;

&lt;p&gt;比起DECIMAL类型，浮点类型保存同样大小的值使用的空间通常更少。FLOAT占用4个字节。DOUBLE 占用8个字节，而且精度更高，范围更大。和整数一样，你选择的仅仅是存储类型。MySQL在内部对浮点类型使用DOUBLE进行计算。&lt;/p&gt;

&lt;p&gt;由于需要额外的空间和计算开销，只有在需要对小数进行精确计算的时候才使用DECIMAL，比如保存金融数据。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MySQL数据类型之整数</title>
      <link>http://nituchao.com/post/2014/mysql-shu-ju-lei-xing-zhi-zheng-shu/</link>
      <pubDate>Fri, 12 Sep 2014 10:20:00 +0800</pubDate>
      
      <guid>http://nituchao.com/post/2014/mysql-shu-ju-lei-xing-zhi-zheng-shu/</guid>
      <description>&lt;p&gt;数字有两种类型：整数(Whole Number)和实数(Real Number)。&lt;/p&gt;

&lt;p&gt;如果存储整数，就可以使用这几种整数类型：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TINYINT&lt;/code&gt; : 8位, [-128, 127]。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SMALLINT&lt;/code&gt; : 16位, [-65536, 65535]。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MEDIUMINT&lt;/code&gt; : 24位, [-16777216, 16777215]。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;INT&lt;/code&gt; : 32位, [-4294967296, 4294967295]。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BIGINT&lt;/code&gt; : 64位, [-1.84467440737096E19 + 1, 1.84467440737096E19]。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;整数类型有可选的&lt;code&gt;UNSIGNED&lt;/code&gt;属性，表示不允许负数，并大致把正上限提高了一倍。&lt;/p&gt;

&lt;p&gt;MySQL还可以对整数类型的定义宽度，比如INT(11)。这对于大多数应用程序都是没有意义的：它不会限制值的范围，只规定了MySQL的交互工具(例如，命令行客户端)来显示字符的个数。对于存储和计算，INT(1)和INT(20)是一样的。&lt;/p&gt;

&lt;p&gt;提示：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Falcon 存储引擎和MSQLAB提供的其他存储引擎内部存储整数的机制是不同的。用户不能控制存储数据的实际大小。第三方存储引擎，例如Brighthouse，也有自己的存储过时和压缩方法。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>